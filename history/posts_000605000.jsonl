{"id": "D-sd2ELA5vuOL1fpygH7VPRZ7V4QIn2jOeUybzggMXQ", "title": "Hiding test 1", "body": "asdfsadf", "timestamp": 1610404565, "digest": "4nJIvwrVzIW-JIaaIMKvKtxULRzT10ZO1kQ8qJHE9eY", "contributor": "0x5507dbd48a5A5bAcE8a6030e878cC4E0af147C33"}
{"id": "-hHzZf-qH-ISZ7oEYSH-nvkBb2WU2JBXzglu_BotPKA", "title": "Formatting Design", "body": "Mirror has the ambitious vision of redefining publishing online by empowering writers with the tools offered by crypto. We are delighted to share that we've officially closed our first full-stack engineering sprint: the MVP of the Mirror blogging platform. This will allow us to onboard our first writers and serve as the foundation for all the functionality in the future.\n\n[Steve Reich, Come Out to Show Them](https://www.youtube.com/watch?v=ouYiTiiY3vg)\n\nWe have a lot to figure out over the next few months and years‚Äîfrom discovering new crypto-native business models for creators to supporting basic things like embedding NFTs‚Äîbut we knew that the starting point for the project was supporting a basic publishing experience‚Äîthe ability to post text and share it with the world. \n\nThis post details our journey so far.\n\n![Season‚Äôs Greetings!](https://images.mirror-media.xyz/publication-images/bb9a61e1-f524-4135-bae5-91ddf7f0a1e9.jpeg)\n\n## The Starting Line\n\nOur first commit to the backend API was 29 days ago, on December 7, 2020 ‚Äî my (Graeme's) first official day at Mirror. Denis had been speaking with [Trent](https://stateful.mirror.xyz/) about announcing his book on Mirror, and working with Jon-Kyle on designs and UI. We set an ambitious goal to have everything working for Trent by Christmas time ‚Äî our gift to the world! üéÅ \n\nTo ship the MVP, we needed to make crucial early technical decisions. Most importantly, how to create a world-class writing tool with a native web3 and crypto foundation.\n\n## How to Construct a Web3-Native Writing Platform\n\nOne of the first challenges was thinking through building the platform from a web3 perspective. Here are rules of the web3 game (*via negativa* style):\n\n1. Post content shall not be centralized\n2. The reading experience should not require trust in Mirror\n3. Mirror shall not own a writer's domain\n4. Writers do not need to connect their wallets and sign everything they write\n5. Mirror shall not attempt to store Ethereum private keys in the browser!\n6. Writing shall not be excessively expensive (for Mirror or writers)\n7. Bonus: No using email-password signup!\n\nThe architecture we came up with looks something like this:\n\n![](https://images.mirror-media.xyz/publication-images/4ad92c52-5226-40c1-b654-4bbfe905c278.jpeg)\n\nI will now briefly break down how we solved each of these problems.\n\n### 1. Post content shall not be centralized\n\nWe decided to use the **Arweave** data storage protocol to store user content. Arweave provides permanent storage of data for a one-time cost at upload time. The data posted to Arweave includes all of the information required to *retrieve* all entries for a publication (including any changes made), and to *verify* authorship authenticity. (We have plans to publish the protocol specification along with an open-source tool that can assist with this retrieval and verification process, so that it would be trivial to migrate off of Mirror if the time ever comes for that.)\n\n### 2. The reading experience should not require trust in Mirror\n\nAll entries are signed by a user's *signing key* (this is a non-Ethereum keypair that does not contain any direct economic value. I'll explain more on this later). The signature is then published to Arweave, along with the digest that was signed, and with the content that went into the digest. The *signing key* itself is put into a message that asserts authorship rights, which is then signed by the writer's Ethereum address. All of this information is stored on Arweave, along with the entry's content ‚Äî for every entry and update. Therefore, it's possible (and fairly easy) for anyone to verify whether an entry was authored by a given Ethereum account.\n\nWe're still iterating on this model, and it's obviously very early. Consider us in the \"testnet\" phase of this (along with everything else you read in this post).\n\n### 3. Mirror shall not own a writer's domain\n\nWe use ENS to provide domain ownership to the writer, who claims this ownership by burning an invite token (called $WRITE; expect more information on this soon) during onboarding. The process involves interacting with the $WRITE ERC20 token contract, which grants approval to an ENS registrar contract to burn the token just before registering the ENS label.\n\n### 4. Writers do not need to connect their wallets and sign everything they write\n\nWe didn't want to make it cumbersome to have to write an Entry on Mirror ‚Äî for example, needing to sign everything with their Ledger wallet (or Metamask). Particularly, because we imagine allowing users to take smaller and more frequent actions, too, like commenting on or liking someone else's entry. We still want to have superb security, but we deemed it to be dissuading if writers required their hardware wallet for writing.\n\n### 5. Mirror shall not attempt to store Ethereum private keys in the browser!\n\nIt's considered heresy to store a user's Ethereum private keys directly in the browser, and I would typically agree with that. It's not strictly true that you *couldn't* build a useful webapp this way (Dharma did it for a while), but the security burden will compound over time. This is mainly because there is no way to make and store a non-extractable Ethereum private key using the native web-crypto library; it doesn't support the same ECDSA curve. I don't know how this will play out in the future, but for now, I would say that this is something to avoid.\n\nWe avoid this security burden in two ways: \n\n1. By using a different signature scheme from the Ethereum implementation (we're using the NIST curve *P-256*), therefore making it impossible for the key to \"hold economic value\" at all, and sidestepping a major issue altogether. The worst case scenario, under the most severe threat model (e.g. a stolen computer), would be fraudulent authorship.\n2. By generating the key using the non-extractable property, and storing it in IndexDB. This means that there's no way to export the private key at all ‚Äî the private key can only be used to sign content on the webpage in which it is loaded, and IndexDB prevents it from being loaded on any website outside of mirror.xyz.\n\nI invite criticism on this approach. I am not a cryptography expert, and we're just trying to make an honest effort at a secure and usable platform that lives outside of the conventional standards of web2 that have been failing us. If you want a more detailed explanation of the approach, you can refer to an [internal RFC](https://eng.mirror.xyz/1cywoB2BSXKRdJPA26NmH26AvuIbTJ0p8rYf7KaKktc) about this topic, which has now been posted on Mirror.\n\n### 6. Writing shall not be excessively expensive (for Mirror or writers)\n\nSolved by using Arweave! üéâ Very cheap (at the moment?) ‚Äî it's costing us about 0.00005 AR per blog post, which amounts to about $0.00015, at the current exchange rate.\n\n### 7. Bonus: No using email-password signup!\n\nSince we have signing keys and a signature-based authenticity model, we don't need to have login sessions, and we don't have anything to recover via email. In the future, it may be useful to allow for email notifications and email digests, but for now, it's interesting that there is no email confirmation required to use Mirror. This is the crypto-native way used by apps like Zerion and Zapper, and is the future of authentication on the web.\n\n(We make up for this lack of friction by adding a transaction confirmation in onboarding! üòÇ But even that, we will smooth out over time.)\n\n## Pre-Mainnet Testing\n\nMirror is still in its early stages, and we are using the Ethereum testnet infrastructure to explore our ideas. This allows us to run through complex protocol flows (like burning tokens, deploying contract, and registering ENS domains) very cheaply and with fast confirmation times. In particular, we're still exploring what the *mechanics* of our economic, naming and ownership protocol will be, as demand grows for a more sophisticated system. We're hoping to deploy to mainnet as soon as we know that migrating our early writers to this better protocol will be feasible and easy.\n\n## Building a Backend API as a \"Protocol Gateway\"\n\nIn order to facilitate a good reading and writing experience, we decided to build a backend API that can act as a *gateway* between client and protocol. This allows us to do things like signature verification before publishing to Arweave, or to pay for the Arweave publication ourselves and cache the entry content for extremely fast response-times. This allows us to have a world-class writing and reading experience, while still achieving all of our goals of content decentralization.\n\nIn terms of building this backend API in 2021, there were probably 10+ viable options for where to deploy code and just as many promising languages for its development. Picking early tools can be difficult! I ended up choosing something that was strongly within my realm of competency, and would also be easy for new engineers on our team to learn. I also chose what I believe to be the path of greatest extensibility and flexibility into the future, which for us meant building our backend in **NodeJS on AWS infrastructure**. The decision was not obvious, however, and I wanted to take into account the competencies we would be building as an engineering order in time to come.\n\nSetting up web applications on AWS is much more time consuming than using an abstracted service like Heroku or Vercel. Things like environments, databases, security groups, and deployments all have to be configured up individually. In the long-run, though, it grants more control, and this can be helpful for crypto applications that sometimes had non-standard concerns. It took me about 2 days to set up this infrastructure ‚Äî including security groups, IAM accounts, databases, staging and production environments, etc. But from here, I know that I have the world's best infrastructure behind us, without the platform risk of newer, less fully-featured services.\n\nWe use **Postgres via AWS's RDS service**, and VPC and security groups for communicating between **ElasticBeanstalk** and RDS. We used **GraphQL with Apollo** for our API endpoints.\n\nI'll note here that, for a while before committing to this path, I considered using writing the backend in Golang or Rust, and protobufs, since cryptographic signatures require strict typing for correct validation across platforms. But I know that development would have been *a lot slower* if we had gone this path. On the other hand, building a competency in Rust from the start would have allowed us to track the growing number of interesting layer-2 integrations (which seems promising).\n\nOur deployments are handled through **Github workflows**, such that every push to our *staging* or *main* triggers an action on Github that deploys the application. To be clear, there is a *lot* that still needs to be improved here ‚Äî including blocking deploys on test suites passing, and measuring test coverage. We don't have full integration tests, e.g. against a built docker contains with exposed GraphQL endpoints.\n\n![The genesis entry](https://images.mirror-media.xyz/publication-images/7c3c118d-8dda-4f5d-9e80-6df764fd403c.jpeg)\n\n## Building a Frontend for Blogging\n\nWe decided to use Vercel and NextJS on the frontend, which has wildcard subdomain support, as well as support for statically rendered content. This has been great so far, because we get fast-loading, well-cached content that can be read easily by machines like social media platforms and search engines. It's also generally a fantastic product for managing staging environments, deployments, etc.\n\n## What went well?\n\nWe were able to get an MVP out *really* really quickly ‚Äî we made a goal to ship before Christmas, and only started building the backend some ways into December. So overall, it took us mere weeks to build a novel CMS that uses public-private key signatures to verify content, stores data in Postgres, stores data on Arweave, burns a token on Ethereum to claim ownership of an ENS label, validates ownership of that label, iterations on our signing model, and so on. \n\nHere's a few specific examples of these things:\n\n1. The first blog post by Trent: [https://stateful.mirror.xyz/a151ee1decb2028a8bb48277f6928c6f38319c32601dc1da1ee82acfcad2e525](https://stateful.mirror.xyz/a151ee1decb2028a8bb48277f6928c6f38319c32601dc1da1ee82acfcad2e525)\n2. A transaction that burns a $WRITE token and claims an ENS domain: [https://rinkeby.etherscan.io/tx/0x29b9d13187a2db64b7d85f4ff5be739729b07404fd1f5fce79b3bba13da7530b](https://rinkeby.etherscan.io/tx/0x29b9d13187a2db64b7d85f4ff5be739729b07404fd1f5fce79b3bba13da7530b)\n3. An Arweave transaction that stores Linda's [post](https://linda.mirror.xyz/df649d61efb92c910464a4e74ae213c4cab150b9cbcc4b7fb6090fc77881a95d) forever, along with signatures that prove authorship: [https://viewblock.io/arweave/tx/WvwsHyKCjfkLoKNbNSGfoV-vaWrJa2PMYB_c3wucXUA](https://viewblock.io/arweave/tx/WvwsHyKCjfkLoKNbNSGfoV-vaWrJa2PMYB_c3wucXUA)\n\nIt's exhausting even to think back through the past month and everything we've been able to build out! And the fact that this is *basically working* is very fun and exciting. I'm glad that we also did a fair amount of this \"in public\" and have screen recording our on-boarding sessions.\n\n## What went wrong?\n\nBy tackling so many challenges at once, it sometimes felt like there were an overwhelming number of important issues that urgently needed to be patched. Sometimes, that made it difficult for me to communicate priorities in linear way, so that we were all on the same page and rationally working together on the same thing. Given that that team hadn't worked together before this project, and are just learning about each of our distinct work and communication styles, there was considerable \"under-communication\" that we need to improve on.\n\nThe fast pace also created some disorder. For example, late one Thursday I was configuring the Github Workflows to deploy our AWS EB environment, and it was working well in staging. We didn't deploy to production over the weekend, and during that time I updated production to a whole new AWS EB environment. Our first deploy on Monday shipped to the *outdated* environment, and a bug manifested right before an [onboarding session](https://www.youtube.com/watch?v=8e9Fcf0DiOE)! We had to roll-back to prevent live-streaming a failed onboarding, and it was very confusing! We wrote our first post-mortem for this.\n\n## What lessons were learned?\n\nWe learned that we can really push hard and work quickly to make an ambitious goal a reality within a short timeframe. I think we proved that by hitting the December 25th deadline.\n\nWe also learned a lot about each each and our competencies (there's only three of us), and how we need to communicate with each other to build more trust and confidence in how things are going. That includes over-communicating more about expectations and responsibilities over the codebase and product, outstanding issues, priorities, and individual goals for any given sprint.\n\nExpect more information on $WRITE soon.\n\nIn the meantime, you can read the first entries published on Mirror over the past few weeks:\n\n- [https://stateful.mirror.xyz/](https://stateful.mirror.xyz/) by [@trent_vanepps](https://twitter.com/trent_vanepps)\n- [http://amorfati.mirror.xyz/](http://amorfati.mirror.xyz/) by [@apruden08](https://twitter.com/apruden08)\n- [https://joonian.mirror.xyz/](https://joonian.mirror.xyz/) by [@joonian](https://twitter.com/joonian)\n- [https://helloshreyas.mirror.xyz/](https://helloshreyas.mirror.xyz/) by [@HelloShreyas](https://twitter.com/HelloShreyas)\n- [https://g.mirror.xyz/](https://g.mirror.xyz/) by [@strangechances](https://twitter.com/strangechances)\n- [https://d.mirror.xyz/](https://d.mirror.xyz/) by [@Iiterature](https://twitter.com/Iiterature)", "timestamp": 1610406990, "digest": "B32AHYVIlCf20jjOc7ebm3dv1W7KIBjdw9JB93z3gKY", "contributor": "0x841fF85B6873d7bfB712C8f7A347C774355b6EC3"}
{"id": "CKmD_xSIdsbeuuGSYCRWy25-30R-5J8DNR1HZPpbU1M", "title": "Formatting Design", "body": "Mirror has the ambitious vision of redefining publishing online by empowering writers with the tools offered by crypto. We are delighted to share that we've officially closed our first full-stack engineering sprint: the MVP of the Mirror blogging platform. This will allow us to onboard our first writers and serve as the foundation for all the functionality in the future.\n\n[Steve Reich, Come Out to Show Them](https://www.youtube.com/watch?v=ouYiTiiY3vg)\n\nWe have a lot to figure out over the next few months and years‚Äîfrom discovering new crypto-native business models for creators to supporting basic things like embedding NFTs‚Äîbut we knew that the starting point for the project was supporting a basic publishing experience‚Äîthe ability to post text and share it with the world. \n\n[Mirror‚Äôs first Tweet](https://twitter.com/viamirror/status/1325856116748726273)\n\nThis post details our journey so far.\n\n![Season‚Äôs Greetings!](https://images.mirror-media.xyz/publication-images/bb9a61e1-f524-4135-bae5-91ddf7f0a1e9.jpeg)\n\n## The Starting Line\n\nOur first commit to the backend API was 29 days ago, on December 7, 2020 ‚Äî my (Graeme's) first official day at Mirror. Denis had been speaking with [Trent](https://stateful.mirror.xyz/) about announcing his book on Mirror, and working with Jon-Kyle on designs and UI. We set an ambitious goal to have everything working for Trent by Christmas time ‚Äî our gift to the world! üéÅ \n\nTo ship the MVP, we needed to make crucial early technical decisions. Most importantly, how to create a world-class writing tool with a native web3 and crypto foundation.\n\n## How to Construct a Web3-Native Writing Platform\n\nOne of the first challenges was thinking through building the platform from a web3 perspective. Here are rules of the web3 game (*via negativa* style):\n\n1. Post content shall not be centralized\n2. The reading experience should not require trust in Mirror\n3. Mirror shall not own a writer's domain\n4. Writers do not need to connect their wallets and sign everything they write\n5. Mirror shall not attempt to store Ethereum private keys in the browser!\n6. Writing shall not be excessively expensive (for Mirror or writers)\n7. Bonus: No using email-password signup!\n\nThe architecture we came up with looks something like this:\n\n![](https://images.mirror-media.xyz/publication-images/4ad92c52-5226-40c1-b654-4bbfe905c278.jpeg)\n\nI will now briefly break down how we solved each of these problems.\n\n### 1. Post content shall not be centralized\n\nWe decided to use the **Arweave** data storage protocol to store user content. Arweave provides permanent storage of data for a one-time cost at upload time. The data posted to Arweave includes all of the information required to *retrieve* all entries for a publication (including any changes made), and to *verify* authorship authenticity. (We have plans to publish the protocol specification along with an open-source tool that can assist with this retrieval and verification process, so that it would be trivial to migrate off of Mirror if the time ever comes for that.)\n\n### 2. The reading experience should not require trust in Mirror\n\nAll entries are signed by a user's *signing key* (this is a non-Ethereum keypair that does not contain any direct economic value. I'll explain more on this later). The signature is then published to Arweave, along with the digest that was signed, and with the content that went into the digest. The *signing key* itself is put into a message that asserts authorship rights, which is then signed by the writer's Ethereum address. All of this information is stored on Arweave, along with the entry's content ‚Äî for every entry and update. Therefore, it's possible (and fairly easy) for anyone to verify whether an entry was authored by a given Ethereum account.\n\nWe're still iterating on this model, and it's obviously very early. Consider us in the \"testnet\" phase of this (along with everything else you read in this post).\n\n### 3. Mirror shall not own a writer's domain\n\nWe use ENS to provide domain ownership to the writer, who claims this ownership by burning an invite token (called $WRITE; expect more information on this soon) during onboarding. The process involves interacting with the $WRITE ERC20 token contract, which grants approval to an ENS registrar contract to burn the token just before registering the ENS label.\n\n### 4. Writers do not need to connect their wallets and sign everything they write\n\nWe didn't want to make it cumbersome to have to write an Entry on Mirror ‚Äî for example, needing to sign everything with their Ledger wallet (or Metamask). Particularly, because we imagine allowing users to take smaller and more frequent actions, too, like commenting on or liking someone else's entry. We still want to have superb security, but we deemed it to be dissuading if writers required their hardware wallet for writing.\n\n### 5. Mirror shall not attempt to store Ethereum private keys in the browser!\n\nIt's considered heresy to store a user's Ethereum private keys directly in the browser, and I would typically agree with that. It's not strictly true that you *couldn't* build a useful webapp this way (Dharma did it for a while), but the security burden will compound over time. This is mainly because there is no way to make and store a non-extractable Ethereum private key using the native web-crypto library; it doesn't support the same ECDSA curve. I don't know how this will play out in the future, but for now, I would say that this is something to avoid.\n\nWe avoid this security burden in two ways: \n\n1. By using a different signature scheme from the Ethereum implementation (we're using the NIST curve *P-256*), therefore making it impossible for the key to \"hold economic value\" at all, and sidestepping a major issue altogether. The worst case scenario, under the most severe threat model (e.g. a stolen computer), would be fraudulent authorship.\n2. By generating the key using the non-extractable property, and storing it in IndexDB. This means that there's no way to export the private key at all ‚Äî the private key can only be used to sign content on the webpage in which it is loaded, and IndexDB prevents it from being loaded on any website outside of mirror.xyz.\n\nI invite criticism on this approach. I am not a cryptography expert, and we're just trying to make an honest effort at a secure and usable platform that lives outside of the conventional standards of web2 that have been failing us. If you want a more detailed explanation of the approach, you can refer to an [internal RFC](https://eng.mirror.xyz/1cywoB2BSXKRdJPA26NmH26AvuIbTJ0p8rYf7KaKktc) about this topic, which has now been posted on Mirror.\n\n### 6. Writing shall not be excessively expensive (for Mirror or writers)\n\nSolved by using Arweave! üéâ Very cheap (at the moment?) ‚Äî it's costing us about 0.00005 AR per blog post, which amounts to about $0.00015, at the current exchange rate.\n\n### 7. Bonus: No using email-password signup!\n\nSince we have signing keys and a signature-based authenticity model, we don't need to have login sessions, and we don't have anything to recover via email. In the future, it may be useful to allow for email notifications and email digests, but for now, it's interesting that there is no email confirmation required to use Mirror. This is the crypto-native way used by apps like Zerion and Zapper, and is the future of authentication on the web.\n\n(We make up for this lack of friction by adding a transaction confirmation in onboarding! üòÇ But even that, we will smooth out over time.)\n\n## Pre-Mainnet Testing\n\nMirror is still in its early stages, and we are using the Ethereum testnet infrastructure to explore our ideas. This allows us to run through complex protocol flows (like burning tokens, deploying contract, and registering ENS domains) very cheaply and with fast confirmation times. In particular, we're still exploring what the *mechanics* of our economic, naming and ownership protocol will be, as demand grows for a more sophisticated system. We're hoping to deploy to mainnet as soon as we know that migrating our early writers to this better protocol will be feasible and easy.\n\n## Building a Backend API as a \"Protocol Gateway\"\n\nIn order to facilitate a good reading and writing experience, we decided to build a backend API that can act as a *gateway* between client and protocol. This allows us to do things like signature verification before publishing to Arweave, or to pay for the Arweave publication ourselves and cache the entry content for extremely fast response-times. This allows us to have a world-class writing and reading experience, while still achieving all of our goals of content decentralization.\n\nIn terms of building this backend API in 2021, there were probably 10+ viable options for where to deploy code and just as many promising languages for its development. Picking early tools can be difficult! I ended up choosing something that was strongly within my realm of competency, and would also be easy for new engineers on our team to learn. I also chose what I believe to be the path of greatest extensibility and flexibility into the future, which for us meant building our backend in **NodeJS on AWS infrastructure**. The decision was not obvious, however, and I wanted to take into account the competencies we would be building as an engineering order in time to come.\n\nSetting up web applications on AWS is much more time consuming than using an abstracted service like Heroku or Vercel. Things like environments, databases, security groups, and deployments all have to be configured up individually. In the long-run, though, it grants more control, and this can be helpful for crypto applications that sometimes had non-standard concerns. It took me about 2 days to set up this infrastructure ‚Äî including security groups, IAM accounts, databases, staging and production environments, etc. But from here, I know that I have the world's best infrastructure behind us, without the platform risk of newer, less fully-featured services.\n\nWe use **Postgres via AWS's RDS service**, and VPC and security groups for communicating between **ElasticBeanstalk** and RDS. We used **GraphQL with Apollo** for our API endpoints.\n\nI'll note here that, for a while before committing to this path, I considered using writing the backend in Golang or Rust, and protobufs, since cryptographic signatures require strict typing for correct validation across platforms. But I know that development would have been *a lot slower* if we had gone this path. On the other hand, building a competency in Rust from the start would have allowed us to track the growing number of interesting layer-2 integrations (which seems promising).\n\nOur deployments are handled through **Github workflows**, such that every push to our *staging* or *main* triggers an action on Github that deploys the application. To be clear, there is a *lot* that still needs to be improved here ‚Äî including blocking deploys on test suites passing, and measuring test coverage. We don't have full integration tests, e.g. against a built docker contains with exposed GraphQL endpoints.\n\n![The genesis entry](https://images.mirror-media.xyz/publication-images/7c3c118d-8dda-4f5d-9e80-6df764fd403c.jpeg)\n\n## Building a Frontend for Blogging\n\nWe decided to use Vercel and NextJS on the frontend, which has wildcard subdomain support, as well as support for statically rendered content. This has been great so far, because we get fast-loading, well-cached content that can be read easily by machines like social media platforms and search engines. It's also generally a fantastic product for managing staging environments, deployments, etc.\n\n## What went well?\n\nWe were able to get an MVP out *really* really quickly ‚Äî we made a goal to ship before Christmas, and only started building the backend some ways into December. So overall, it took us mere weeks to build a novel CMS that uses public-private key signatures to verify content, stores data in Postgres, stores data on Arweave, burns a token on Ethereum to claim ownership of an ENS label, validates ownership of that label, iterations on our signing model, and so on. \n\nHere's a few specific examples of these things:\n\n1. The first blog post by Trent: [https://stateful.mirror.xyz/a151ee1decb2028a8bb48277f6928c6f38319c32601dc1da1ee82acfcad2e525](https://stateful.mirror.xyz/a151ee1decb2028a8bb48277f6928c6f38319c32601dc1da1ee82acfcad2e525)\n2. A transaction that burns a $WRITE token and claims an ENS domain: [https://rinkeby.etherscan.io/tx/0x29b9d13187a2db64b7d85f4ff5be739729b07404fd1f5fce79b3bba13da7530b](https://rinkeby.etherscan.io/tx/0x29b9d13187a2db64b7d85f4ff5be739729b07404fd1f5fce79b3bba13da7530b)\n3. An Arweave transaction that stores Linda's [post](https://linda.mirror.xyz/df649d61efb92c910464a4e74ae213c4cab150b9cbcc4b7fb6090fc77881a95d) forever, along with signatures that prove authorship: [https://viewblock.io/arweave/tx/WvwsHyKCjfkLoKNbNSGfoV-vaWrJa2PMYB_c3wucXUA](https://viewblock.io/arweave/tx/WvwsHyKCjfkLoKNbNSGfoV-vaWrJa2PMYB_c3wucXUA)\n\nIt's exhausting even to think back through the past month and everything we've been able to build out! And the fact that this is *basically working* is very fun and exciting. I'm glad that we also did a fair amount of this \"in public\" and have screen recording our on-boarding sessions.\n\n## What went wrong?\n\nBy tackling so many challenges at once, it sometimes felt like there were an overwhelming number of important issues that urgently needed to be patched. Sometimes, that made it difficult for me to communicate priorities in linear way, so that we were all on the same page and rationally working together on the same thing. Given that that team hadn't worked together before this project, and are just learning about each of our distinct work and communication styles, there was considerable \"under-communication\" that we need to improve on.\n\nThe fast pace also created some disorder. For example, late one Thursday I was configuring the Github Workflows to deploy our AWS EB environment, and it was working well in staging. We didn't deploy to production over the weekend, and during that time I updated production to a whole new AWS EB environment. Our first deploy on Monday shipped to the *outdated* environment, and a bug manifested right before an [onboarding session](https://www.youtube.com/watch?v=8e9Fcf0DiOE)! We had to roll-back to prevent live-streaming a failed onboarding, and it was very confusing! We wrote our first post-mortem for this.\n\n## What lessons were learned?\n\nWe learned that we can really push hard and work quickly to make an ambitious goal a reality within a short timeframe. I think we proved that by hitting the December 25th deadline.\n\nWe also learned a lot about each each and our competencies (there's only three of us), and how we need to communicate with each other to build more trust and confidence in how things are going. That includes over-communicating more about expectations and responsibilities over the codebase and product, outstanding issues, priorities, and individual goals for any given sprint.\n\nExpect more information on $WRITE soon.\n\nIn the meantime, you can read the first entries published on Mirror over the past few weeks:\n\n- [https://stateful.mirror.xyz/](https://stateful.mirror.xyz/) by [@trent_vanepps](https://twitter.com/trent_vanepps)\n- [http://amorfati.mirror.xyz/](http://amorfati.mirror.xyz/) by [@apruden08](https://twitter.com/apruden08)\n- [https://joonian.mirror.xyz/](https://joonian.mirror.xyz/) by [@joonian](https://twitter.com/joonian)\n- [https://helloshreyas.mirror.xyz/](https://helloshreyas.mirror.xyz/) by [@HelloShreyas](https://twitter.com/HelloShreyas)\n- [https://g.mirror.xyz/](https://g.mirror.xyz/) by [@strangechances](https://twitter.com/strangechances)\n- [https://d.mirror.xyz/](https://d.mirror.xyz/) by [@Iiterature](https://twitter.com/Iiterature)", "timestamp": 1610412049, "digest": "B32AHYVIlCf20jjOc7ebm3dv1W7KIBjdw9JB93z3gKY", "contributor": "0x841fF85B6873d7bfB712C8f7A347C774355b6EC3"}
{"id": "1tCc2PIGfTzr3NuF096z8Txge9QFiPBHrKJZ2znn6xc", "title": "Formatting Design", "body": "Mirror has the ambitious vision of redefining publishing online by empowering writers with the tools offered by crypto. We are delighted to share that we've officially closed our first full-stack engineering sprint: the MVP of the Mirror blogging platform. This will allow us to onboard our first writers and serve as the foundation for all the functionality in the future.\n\n[Mirror](https://mirror.xyz)\n\n[Steve Reich, Come Out to Show Them](https://www.youtube.com/watch?v=ouYiTiiY3vg)\n\nWe have a lot to figure out over the next few months and years‚Äîfrom discovering new crypto-native business models for creators to supporting basic things like embedding NFTs‚Äîbut we knew that the starting point for the project was supporting a basic publishing experience‚Äîthe ability to post text and share it with the world. \n\n[Mirror‚Äôs first Tweet](https://twitter.com/viamirror/status/1325856116748726273)\n\nThis post details our journey so far.\n\n![Season‚Äôs Greetings!](https://images.mirror-media.xyz/publication-images/bb9a61e1-f524-4135-bae5-91ddf7f0a1e9.jpeg)\n\n## The Starting Line\n\nOur first commit to the backend API was 29 days ago, on December 7, 2020 ‚Äî my (Graeme's) first official day at Mirror. Denis had been speaking with [Trent](https://stateful.mirror.xyz/) about announcing his book on Mirror, and working with Jon-Kyle on designs and UI. We set an ambitious goal to have everything working for Trent by Christmas time ‚Äî our gift to the world! üéÅ \n\nTo ship the MVP, we needed to make crucial early technical decisions. Most importantly, how to create a world-class writing tool with a native web3 and crypto foundation.\n\n## How to Construct a Web3-Native Writing Platform\n\nOne of the first challenges was thinking through building the platform from a web3 perspective. Here are rules of the web3 game (*via negativa* style):\n\n1. Post content shall not be centralized\n2. The reading experience should not require trust in Mirror\n3. Mirror shall not own a writer's domain\n4. Writers do not need to connect their wallets and sign everything they write\n5. Mirror shall not attempt to store Ethereum private keys in the browser!\n6. Writing shall not be excessively expensive (for Mirror or writers)\n7. Bonus: No using email-password signup!\n\nThe architecture we came up with looks something like this:\n\n![](https://images.mirror-media.xyz/publication-images/4ad92c52-5226-40c1-b654-4bbfe905c278.jpeg)\n\nI will now briefly break down how we solved each of these problems.\n\n### 1. Post content shall not be centralized\n\nWe decided to use the **Arweave** data storage protocol to store user content. Arweave provides permanent storage of data for a one-time cost at upload time. The data posted to Arweave includes all of the information required to *retrieve* all entries for a publication (including any changes made), and to *verify* authorship authenticity. (We have plans to publish the protocol specification along with an open-source tool that can assist with this retrieval and verification process, so that it would be trivial to migrate off of Mirror if the time ever comes for that.)\n\n### 2. The reading experience should not require trust in Mirror\n\nAll entries are signed by a user's *signing key* (this is a non-Ethereum keypair that does not contain any direct economic value. I'll explain more on this later). The signature is then published to Arweave, along with the digest that was signed, and with the content that went into the digest. The *signing key* itself is put into a message that asserts authorship rights, which is then signed by the writer's Ethereum address. All of this information is stored on Arweave, along with the entry's content ‚Äî for every entry and update. Therefore, it's possible (and fairly easy) for anyone to verify whether an entry was authored by a given Ethereum account.\n\nWe're still iterating on this model, and it's obviously very early. Consider us in the \"testnet\" phase of this (along with everything else you read in this post).\n\n### 3. Mirror shall not own a writer's domain\n\nWe use ENS to provide domain ownership to the writer, who claims this ownership by burning an invite token (called $WRITE; expect more information on this soon) during onboarding. The process involves interacting with the $WRITE ERC20 token contract, which grants approval to an ENS registrar contract to burn the token just before registering the ENS label.\n\n### 4. Writers do not need to connect their wallets and sign everything they write\n\nWe didn't want to make it cumbersome to have to write an Entry on Mirror ‚Äî for example, needing to sign everything with their Ledger wallet (or Metamask). Particularly, because we imagine allowing users to take smaller and more frequent actions, too, like commenting on or liking someone else's entry. We still want to have superb security, but we deemed it to be dissuading if writers required their hardware wallet for writing.\n\n### 5. Mirror shall not attempt to store Ethereum private keys in the browser!\n\nIt's considered heresy to store a user's Ethereum private keys directly in the browser, and I would typically agree with that. It's not strictly true that you *couldn't* build a useful webapp this way (Dharma did it for a while), but the security burden will compound over time. This is mainly because there is no way to make and store a non-extractable Ethereum private key using the native web-crypto library; it doesn't support the same ECDSA curve. I don't know how this will play out in the future, but for now, I would say that this is something to avoid.\n\nWe avoid this security burden in two ways: \n\n1. By using a different signature scheme from the Ethereum implementation (we're using the NIST curve *P-256*), therefore making it impossible for the key to \"hold economic value\" at all, and sidestepping a major issue altogether. The worst case scenario, under the most severe threat model (e.g. a stolen computer), would be fraudulent authorship.\n2. By generating the key using the non-extractable property, and storing it in IndexDB. This means that there's no way to export the private key at all ‚Äî the private key can only be used to sign content on the webpage in which it is loaded, and IndexDB prevents it from being loaded on any website outside of mirror.xyz.\n\nI invite criticism on this approach. I am not a cryptography expert, and we're just trying to make an honest effort at a secure and usable platform that lives outside of the conventional standards of web2 that have been failing us. If you want a more detailed explanation of the approach, you can refer to an [internal RFC](https://eng.mirror.xyz/1cywoB2BSXKRdJPA26NmH26AvuIbTJ0p8rYf7KaKktc) about this topic, which has now been posted on Mirror.\n\n### 6. Writing shall not be excessively expensive (for Mirror or writers)\n\nSolved by using Arweave! üéâ Very cheap (at the moment?) ‚Äî it's costing us about 0.00005 AR per blog post, which amounts to about $0.00015, at the current exchange rate.\n\n### 7. Bonus: No using email-password signup!\n\nSince we have signing keys and a signature-based authenticity model, we don't need to have login sessions, and we don't have anything to recover via email. In the future, it may be useful to allow for email notifications and email digests, but for now, it's interesting that there is no email confirmation required to use Mirror. This is the crypto-native way used by apps like Zerion and Zapper, and is the future of authentication on the web.\n\n(We make up for this lack of friction by adding a transaction confirmation in onboarding! üòÇ But even that, we will smooth out over time.)\n\n## Pre-Mainnet Testing\n\nMirror is still in its early stages, and we are using the Ethereum testnet infrastructure to explore our ideas. This allows us to run through complex protocol flows (like burning tokens, deploying contract, and registering ENS domains) very cheaply and with fast confirmation times. In particular, we're still exploring what the *mechanics* of our economic, naming and ownership protocol will be, as demand grows for a more sophisticated system. We're hoping to deploy to mainnet as soon as we know that migrating our early writers to this better protocol will be feasible and easy.\n\n## Building a Backend API as a \"Protocol Gateway\"\n\nIn order to facilitate a good reading and writing experience, we decided to build a backend API that can act as a *gateway* between client and protocol. This allows us to do things like signature verification before publishing to Arweave, or to pay for the Arweave publication ourselves and cache the entry content for extremely fast response-times. This allows us to have a world-class writing and reading experience, while still achieving all of our goals of content decentralization.\n\nIn terms of building this backend API in 2021, there were probably 10+ viable options for where to deploy code and just as many promising languages for its development. Picking early tools can be difficult! I ended up choosing something that was strongly within my realm of competency, and would also be easy for new engineers on our team to learn. I also chose what I believe to be the path of greatest extensibility and flexibility into the future, which for us meant building our backend in **NodeJS on AWS infrastructure**. The decision was not obvious, however, and I wanted to take into account the competencies we would be building as an engineering order in time to come.\n\nSetting up web applications on AWS is much more time consuming than using an abstracted service like Heroku or Vercel. Things like environments, databases, security groups, and deployments all have to be configured up individually. In the long-run, though, it grants more control, and this can be helpful for crypto applications that sometimes had non-standard concerns. It took me about 2 days to set up this infrastructure ‚Äî including security groups, IAM accounts, databases, staging and production environments, etc. But from here, I know that I have the world's best infrastructure behind us, without the platform risk of newer, less fully-featured services.\n\nWe use **Postgres via AWS's RDS service**, and VPC and security groups for communicating between **ElasticBeanstalk** and RDS. We used **GraphQL with Apollo** for our API endpoints.\n\nI'll note here that, for a while before committing to this path, I considered using writing the backend in Golang or Rust, and protobufs, since cryptographic signatures require strict typing for correct validation across platforms. But I know that development would have been *a lot slower* if we had gone this path. On the other hand, building a competency in Rust from the start would have allowed us to track the growing number of interesting layer-2 integrations (which seems promising).\n\nOur deployments are handled through **Github workflows**, such that every push to our *staging* or *main* triggers an action on Github that deploys the application. To be clear, there is a *lot* that still needs to be improved here ‚Äî including blocking deploys on test suites passing, and measuring test coverage. We don't have full integration tests, e.g. against a built docker contains with exposed GraphQL endpoints.\n\n![The genesis entry](https://images.mirror-media.xyz/publication-images/7c3c118d-8dda-4f5d-9e80-6df764fd403c.jpeg)\n\n## Building a Frontend for Blogging\n\nWe decided to use Vercel and NextJS on the frontend, which has wildcard subdomain support, as well as support for statically rendered content. This has been great so far, because we get fast-loading, well-cached content that can be read easily by machines like social media platforms and search engines. It's also generally a fantastic product for managing staging environments, deployments, etc.\n\n## What went well?\n\nWe were able to get an MVP out *really* really quickly ‚Äî we made a goal to ship before Christmas, and only started building the backend some ways into December. So overall, it took us mere weeks to build a novel CMS that uses public-private key signatures to verify content, stores data in Postgres, stores data on Arweave, burns a token on Ethereum to claim ownership of an ENS label, validates ownership of that label, iterations on our signing model, and so on. \n\nHere's a few specific examples of these things:\n\n1. The first blog post by Trent: [https://stateful.mirror.xyz/a151ee1decb2028a8bb48277f6928c6f38319c32601dc1da1ee82acfcad2e525](https://stateful.mirror.xyz/a151ee1decb2028a8bb48277f6928c6f38319c32601dc1da1ee82acfcad2e525)\n2. A transaction that burns a $WRITE token and claims an ENS domain: [https://rinkeby.etherscan.io/tx/0x29b9d13187a2db64b7d85f4ff5be739729b07404fd1f5fce79b3bba13da7530b](https://rinkeby.etherscan.io/tx/0x29b9d13187a2db64b7d85f4ff5be739729b07404fd1f5fce79b3bba13da7530b)\n3. An Arweave transaction that stores Linda's [post](https://linda.mirror.xyz/df649d61efb92c910464a4e74ae213c4cab150b9cbcc4b7fb6090fc77881a95d) forever, along with signatures that prove authorship: [https://viewblock.io/arweave/tx/WvwsHyKCjfkLoKNbNSGfoV-vaWrJa2PMYB_c3wucXUA](https://viewblock.io/arweave/tx/WvwsHyKCjfkLoKNbNSGfoV-vaWrJa2PMYB_c3wucXUA)\n\nIt's exhausting even to think back through the past month and everything we've been able to build out! And the fact that this is *basically working* is very fun and exciting. I'm glad that we also did a fair amount of this \"in public\" and have screen recording our on-boarding sessions.\n\n## What went wrong?\n\nBy tackling so many challenges at once, it sometimes felt like there were an overwhelming number of important issues that urgently needed to be patched. Sometimes, that made it difficult for me to communicate priorities in linear way, so that we were all on the same page and rationally working together on the same thing. Given that that team hadn't worked together before this project, and are just learning about each of our distinct work and communication styles, there was considerable \"under-communication\" that we need to improve on.\n\nThe fast pace also created some disorder. For example, late one Thursday I was configuring the Github Workflows to deploy our AWS EB environment, and it was working well in staging. We didn't deploy to production over the weekend, and during that time I updated production to a whole new AWS EB environment. Our first deploy on Monday shipped to the *outdated* environment, and a bug manifested right before an [onboarding session](https://www.youtube.com/watch?v=8e9Fcf0DiOE)! We had to roll-back to prevent live-streaming a failed onboarding, and it was very confusing! We wrote our first post-mortem for this.\n\n## What lessons were learned?\n\nWe learned that we can really push hard and work quickly to make an ambitious goal a reality within a short timeframe. I think we proved that by hitting the December 25th deadline.\n\nWe also learned a lot about each each and our competencies (there's only three of us), and how we need to communicate with each other to build more trust and confidence in how things are going. That includes over-communicating more about expectations and responsibilities over the codebase and product, outstanding issues, priorities, and individual goals for any given sprint.\n\nExpect more information on $WRITE soon.\n\nIn the meantime, you can read the first entries published on Mirror over the past few weeks:\n\n- [https://stateful.mirror.xyz/](https://stateful.mirror.xyz/) by [@trent_vanepps](https://twitter.com/trent_vanepps)\n- [http://amorfati.mirror.xyz/](http://amorfati.mirror.xyz/) by [@apruden08](https://twitter.com/apruden08)\n- [https://joonian.mirror.xyz/](https://joonian.mirror.xyz/) by [@joonian](https://twitter.com/joonian)\n- [https://helloshreyas.mirror.xyz/](https://helloshreyas.mirror.xyz/) by [@HelloShreyas](https://twitter.com/HelloShreyas)\n- [https://g.mirror.xyz/](https://g.mirror.xyz/) by [@strangechances](https://twitter.com/strangechances)\n- [https://d.mirror.xyz/](https://d.mirror.xyz/) by [@Iiterature](https://twitter.com/Iiterature)", "timestamp": 1610416427, "digest": "B32AHYVIlCf20jjOc7ebm3dv1W7KIBjdw9JB93z3gKY", "contributor": "0x841fF85B6873d7bfB712C8f7A347C774355b6EC3"}
{"id": "LtM1-xde5IidVnpNNZ-CUhF6amAr7bF1aO1MQYwpm9E", "title": "test entry", "body": "1", "timestamp": 1610416707, "digest": "r5uOTXxhbJJNqfpjDPhJZ0QrTUOsDfAmqe2Xd4_KeU4", "contributor": "0x5507dbd48a5A5bAcE8a6030e878cC4E0af147C33"}
{"id": "uRIhMzq1L44749kwyJMV_FDUsTRDIx1V51VZ3EvTgqI", "title": "test", "body": "test", "timestamp": 1610417029, "digest": "s8KPUQnc1h9HqVFlgWq5si3xD_dpY3HpZdEPCxB7ZII", "contributor": "0x5507dbd48a5A5bAcE8a6030e878cC4E0af147C33"}
{"id": "9f4YOmtjjusSsPv1SJpn_Jr5ZDSdhnd0NexVABBPaLY", "title": "testet", "body": "asd", "timestamp": 1610417317, "digest": "6MGWcJu10lyXxeVsiCaUHU5hoXEtB7W4JJa6lSGHlrI", "contributor": "0x5507dbd48a5A5bAcE8a6030e878cC4E0af147C33"}
{"id": "EIYu_mbRWZeuZ-2PWklGxmdjoxIFjUzm6TIvL8SHAiw", "title": "entry 3", "body": "asdasd", "timestamp": 1610417385, "digest": "0lWzLxim0tNPWRP9wx39rtD7XF9p0sypzXQ2J4AFnY8", "contributor": "0x5507dbd48a5A5bAcE8a6030e878cC4E0af147C33"}
{"id": "fch_lLLo2yh8J6c_vlkoZGl86bvR9lMurbthgeLi88U", "title": "entry 2", "body": "sadfsadf", "timestamp": 1610417363, "digest": "Bah0OYpyEv4bT5Il9H7_tJ4QqBY8tKGsJSBJV3L3X-I", "contributor": "0x5507dbd48a5A5bAcE8a6030e878cC4E0af147C33"}
{"id": "O2BWXXBVUsORARsipe7QoyPqQOFbNb7OToVUAM02V1I", "title": "entry 1", "body": "aasdasd", "timestamp": 1610417355, "digest": "CHKDzINr63X3sW_hSHqz61NGAmvxKfek55lCKGMHKm0", "contributor": "0x5507dbd48a5A5bAcE8a6030e878cC4E0af147C33"}
{"id": "1NCqEncrKBkNq1jq0lN5YbAvFraqHLhWCbA0iTHtyiA", "title": "entry 5", "body": "qwe", "timestamp": 1610417607, "digest": "cFPfbFb9hcl10vx0Adn53wh_JAYComE3F5PBJzCKEKc", "contributor": "0x5507dbd48a5A5bAcE8a6030e878cC4E0af147C33"}
{"id": "5E5QdjmcqLUnJh3DlVwsKvNls5Shb1vWpnU1som-4Yc", "title": "My First Entry V3", "body": "Test", "timestamp": 1610417789, "digest": "wIeSkPWs-DHpEdiIykrx64rOKEUZVRrFbSzGDM3OvPs", "contributor": "0x5507dbd48a5A5bAcE8a6030e878cC4E0af147C33"}
{"id": "EamqEYfHsH0Oj-8noTKWcy2NouwfqhIEnlebWUZKgTk", "title": "My First Entry", "body": "Test", "timestamp": 1610417740, "digest": "wIeSkPWs-DHpEdiIykrx64rOKEUZVRrFbSzGDM3OvPs", "contributor": "0x5507dbd48a5A5bAcE8a6030e878cC4E0af147C33"}
{"id": "IR1w7NokE3mEhUhUkQypKDkuo9k1X4VufSuovXM5XuU", "title": "Another entry", "body": "Hello", "timestamp": 1610417973, "digest": "TEzZvSjDT-j5QUjmf9yDDOA5jUruZWEyIjCWm9uj240", "contributor": "0x5507dbd48a5A5bAcE8a6030e878cC4E0af147C33"}
{"id": "kYkLgHRQOgcdjqPS2uvlUzMAt4ETNP40-j8eIUjWo6A", "title": "My First Entry V2", "body": "Test", "timestamp": 1610417750, "digest": "wIeSkPWs-DHpEdiIykrx64rOKEUZVRrFbSzGDM3OvPs", "contributor": "0x5507dbd48a5A5bAcE8a6030e878cC4E0af147C33"}
{"id": "l8Cu-zPSPgBvlAa8um4DyyCPGGlW_6f8PldNLgfC3pM", "title": "Second entry", "body": "asdfsadf", "timestamp": 1610417996, "digest": "1cU1x3ipro8Gxa0-ZFoj6ND0k9mgBr1oDiWPCAa0q5s", "contributor": "0x5507dbd48a5A5bAcE8a6030e878cC4E0af147C33"}
{"id": "QV-yOry9eHxI1vvKPa8yOkH0aHhagH7ZjSkINConOc0", "title": "entry 4", "body": "my entry", "timestamp": 1610417471, "digest": "VBMBak6ezGTviVaGDL8QQGVzKWBNqJSQU521aNdE2xE", "contributor": "0x5507dbd48a5A5bAcE8a6030e878cC4E0af147C33"}
{"id": "lWM30nNTcZfbfK48KZIXqABsFvobZbiiPPySKeJrJLE", "title": "Second entry V2", "body": "asdfsadf", "timestamp": 1610418014, "digest": "1cU1x3ipro8Gxa0-ZFoj6ND0k9mgBr1oDiWPCAa0q5s", "contributor": "0x5507dbd48a5A5bAcE8a6030e878cC4E0af147C33"}
{"id": "hKMhP0kl9j6vJ7ob-SOtDKCW_m_Nnu7BdcGftUena30", "title": "Entry 2", "body": "Test", "timestamp": 1610418934, "digest": "JQVT9h9KxVGp_ep4FzB-7JcK3HeUjGmnKNN9WViVVeA", "contributor": "0x5507dbd48a5A5bAcE8a6030e878cC4E0af147C33"}
{"id": "ioAQfMxeYgVZQkVsElMLaGINLWBBAnJTaTNAt5F4dpM", "title": "Entry 6", "body": "hello", "timestamp": 1610419450, "digest": "lRVwjAcnZK25p8jErDBQOgtQIV22Zoula0-K2YLKR18", "contributor": "0x5507dbd48a5A5bAcE8a6030e878cC4E0af147C33"}
{"id": "mrp3Hgd6lXPOKm16fZ3C5M7QZKhT_674rhv_MJ77Rq4", "title": "Entry 1", "body": "test", "timestamp": 1610418926, "digest": "-kgRCu87KuWHUggC3nM-MnvE1mp610-uvua8ChybgkA", "contributor": "0x5507dbd48a5A5bAcE8a6030e878cC4E0af147C33"}
{"id": "mZxzjwiu3rorGbKaU8wdPYynjHZQNIyssbbq26nEIGA", "title": "Formatting Design", "body": "Mirror has the ambitious vision of redefining publishing online by empowering writers with the tools offered by crypto. We are delighted to share that we've officially closed our first full-stack engineering sprint: the MVP of the Mirror blogging platform. This will allow us to onboard our first writers and serve as the foundation for all the functionality in the future.\n\n[Folder Studio](https://folder.studio)\n\n[Steve Reich, Come Out to Show Them](https://www.youtube.com/watch?v=ouYiTiiY3vg)\n\nWe have a lot to figure out over the next few months and years‚Äîfrom discovering new crypto-native business models for creators to supporting basic things like embedding NFTs‚Äîbut we knew that the starting point for the project was supporting a basic publishing experience‚Äîthe ability to post text and share it with the world. \n\n[Mirror‚Äôs first Tweet](https://twitter.com/viamirror/status/1325856116748726273)\n\nThis post details our journey so far.\n\n![Season‚Äôs Greetings!](https://images.mirror-media.xyz/publication-images/bb9a61e1-f524-4135-bae5-91ddf7f0a1e9.jpeg)\n\n## The Starting Line\n\nOur first commit to the backend API was 29 days ago, on December 7, 2020 ‚Äî my (Graeme's) first official day at Mirror. Denis had been speaking with [Trent](https://stateful.mirror.xyz/) about announcing his book on Mirror, and working with Jon-Kyle on designs and UI. We set an ambitious goal to have everything working for Trent by Christmas time ‚Äî our gift to the world! üéÅ \n\nTo ship the MVP, we needed to make crucial early technical decisions. Most importantly, how to create a world-class writing tool with a native web3 and crypto foundation.\n\n## How to Construct a Web3-Native Writing Platform\n\nOne of the first challenges was thinking through building the platform from a web3 perspective. Here are rules of the web3 game (*via negativa* style):\n\n1. Post content shall not be centralized\n2. The reading experience should not require trust in Mirror\n3. Mirror shall not own a writer's domain\n4. Writers do not need to connect their wallets and sign everything they write\n5. Mirror shall not attempt to store Ethereum private keys in the browser!\n6. Writing shall not be excessively expensive (for Mirror or writers)\n7. Bonus: No using email-password signup!\n\nThe architecture we came up with looks something like this:\n\n![](https://images.mirror-media.xyz/publication-images/4ad92c52-5226-40c1-b654-4bbfe905c278.jpeg)\n\nI will now briefly break down how we solved each of these problems.\n\n### 1. Post content shall not be centralized\n\nWe decided to use the **Arweave** data storage protocol to store user content. Arweave provides permanent storage of data for a one-time cost at upload time. The data posted to Arweave includes all of the information required to *retrieve* all entries for a publication (including any changes made), and to *verify* authorship authenticity. (We have plans to publish the protocol specification along with an open-source tool that can assist with this retrieval and verification process, so that it would be trivial to migrate off of Mirror if the time ever comes for that.)\n\n### 2. The reading experience should not require trust in Mirror\n\nAll entries are signed by a user's *signing key* (this is a non-Ethereum keypair that does not contain any direct economic value. I'll explain more on this later). The signature is then published to Arweave, along with the digest that was signed, and with the content that went into the digest. The *signing key* itself is put into a message that asserts authorship rights, which is then signed by the writer's Ethereum address. All of this information is stored on Arweave, along with the entry's content ‚Äî for every entry and update. Therefore, it's possible (and fairly easy) for anyone to verify whether an entry was authored by a given Ethereum account.\n\nWe're still iterating on this model, and it's obviously very early. Consider us in the \"testnet\" phase of this (along with everything else you read in this post).\n\n### 3. Mirror shall not own a writer's domain\n\nWe use ENS to provide domain ownership to the writer, who claims this ownership by burning an invite token (called $WRITE; expect more information on this soon) during onboarding. The process involves interacting with the $WRITE ERC20 token contract, which grants approval to an ENS registrar contract to burn the token just before registering the ENS label.\n\n### 4. Writers do not need to connect their wallets and sign everything they write\n\nWe didn't want to make it cumbersome to have to write an Entry on Mirror ‚Äî for example, needing to sign everything with their Ledger wallet (or Metamask). Particularly, because we imagine allowing users to take smaller and more frequent actions, too, like commenting on or liking someone else's entry. We still want to have superb security, but we deemed it to be dissuading if writers required their hardware wallet for writing.\n\n### 5. Mirror shall not attempt to store Ethereum private keys in the browser!\n\nIt's considered heresy to store a user's Ethereum private keys directly in the browser, and I would typically agree with that. It's not strictly true that you *couldn't* build a useful webapp this way (Dharma did it for a while), but the security burden will compound over time. This is mainly because there is no way to make and store a non-extractable Ethereum private key using the native web-crypto library; it doesn't support the same ECDSA curve. I don't know how this will play out in the future, but for now, I would say that this is something to avoid.\n\nWe avoid this security burden in two ways: \n\n1. By using a different signature scheme from the Ethereum implementation (we're using the NIST curve *P-256*), therefore making it impossible for the key to \"hold economic value\" at all, and sidestepping a major issue altogether. The worst case scenario, under the most severe threat model (e.g. a stolen computer), would be fraudulent authorship.\n2. By generating the key using the non-extractable property, and storing it in IndexDB. This means that there's no way to export the private key at all ‚Äî the private key can only be used to sign content on the webpage in which it is loaded, and IndexDB prevents it from being loaded on any website outside of mirror.xyz.\n\nI invite criticism on this approach. I am not a cryptography expert, and we're just trying to make an honest effort at a secure and usable platform that lives outside of the conventional standards of web2 that have been failing us. If you want a more detailed explanation of the approach, you can refer to an [internal RFC](https://eng.mirror.xyz/1cywoB2BSXKRdJPA26NmH26AvuIbTJ0p8rYf7KaKktc) about this topic, which has now been posted on Mirror.\n\n### 6. Writing shall not be excessively expensive (for Mirror or writers)\n\nSolved by using Arweave! üéâ Very cheap (at the moment?) ‚Äî it's costing us about 0.00005 AR per blog post, which amounts to about $0.00015, at the current exchange rate.\n\n### 7. Bonus: No using email-password signup!\n\nSince we have signing keys and a signature-based authenticity model, we don't need to have login sessions, and we don't have anything to recover via email. In the future, it may be useful to allow for email notifications and email digests, but for now, it's interesting that there is no email confirmation required to use Mirror. This is the crypto-native way used by apps like Zerion and Zapper, and is the future of authentication on the web.\n\n(We make up for this lack of friction by adding a transaction confirmation in onboarding! üòÇ But even that, we will smooth out over time.)\n\n## Pre-Mainnet Testing\n\nMirror is still in its early stages, and we are using the Ethereum testnet infrastructure to explore our ideas. This allows us to run through complex protocol flows (like burning tokens, deploying contract, and registering ENS domains) very cheaply and with fast confirmation times. In particular, we're still exploring what the *mechanics* of our economic, naming and ownership protocol will be, as demand grows for a more sophisticated system. We're hoping to deploy to mainnet as soon as we know that migrating our early writers to this better protocol will be feasible and easy.\n\n## Building a Backend API as a \"Protocol Gateway\"\n\nIn order to facilitate a good reading and writing experience, we decided to build a backend API that can act as a *gateway* between client and protocol. This allows us to do things like signature verification before publishing to Arweave, or to pay for the Arweave publication ourselves and cache the entry content for extremely fast response-times. This allows us to have a world-class writing and reading experience, while still achieving all of our goals of content decentralization.\n\nIn terms of building this backend API in 2021, there were probably 10+ viable options for where to deploy code and just as many promising languages for its development. Picking early tools can be difficult! I ended up choosing something that was strongly within my realm of competency, and would also be easy for new engineers on our team to learn. I also chose what I believe to be the path of greatest extensibility and flexibility into the future, which for us meant building our backend in **NodeJS on AWS infrastructure**. The decision was not obvious, however, and I wanted to take into account the competencies we would be building as an engineering order in time to come.\n\nSetting up web applications on AWS is much more time consuming than using an abstracted service like Heroku or Vercel. Things like environments, databases, security groups, and deployments all have to be configured up individually. In the long-run, though, it grants more control, and this can be helpful for crypto applications that sometimes had non-standard concerns. It took me about 2 days to set up this infrastructure ‚Äî including security groups, IAM accounts, databases, staging and production environments, etc. But from here, I know that I have the world's best infrastructure behind us, without the platform risk of newer, less fully-featured services.\n\nWe use **Postgres via AWS's RDS service**, and VPC and security groups for communicating between **ElasticBeanstalk** and RDS. We used **GraphQL with Apollo** for our API endpoints.\n\nI'll note here that, for a while before committing to this path, I considered using writing the backend in Golang or Rust, and protobufs, since cryptographic signatures require strict typing for correct validation across platforms. But I know that development would have been *a lot slower* if we had gone this path. On the other hand, building a competency in Rust from the start would have allowed us to track the growing number of interesting layer-2 integrations (which seems promising).\n\nOur deployments are handled through **Github workflows**, such that every push to our *staging* or *main* triggers an action on Github that deploys the application. To be clear, there is a *lot* that still needs to be improved here ‚Äî including blocking deploys on test suites passing, and measuring test coverage. We don't have full integration tests, e.g. against a built docker contains with exposed GraphQL endpoints.\n\n![The genesis entry](https://images.mirror-media.xyz/publication-images/7c3c118d-8dda-4f5d-9e80-6df764fd403c.jpeg)\n\n## Building a Frontend for Blogging\n\nWe decided to use Vercel and NextJS on the frontend, which has wildcard subdomain support, as well as support for statically rendered content. This has been great so far, because we get fast-loading, well-cached content that can be read easily by machines like social media platforms and search engines. It's also generally a fantastic product for managing staging environments, deployments, etc.\n\n## What went well?\n\nWe were able to get an MVP out *really* really quickly ‚Äî we made a goal to ship before Christmas, and only started building the backend some ways into December. So overall, it took us mere weeks to build a novel CMS that uses public-private key signatures to verify content, stores data in Postgres, stores data on Arweave, burns a token on Ethereum to claim ownership of an ENS label, validates ownership of that label, iterations on our signing model, and so on. \n\nHere's a few specific examples of these things:\n\n1. The first blog post by Trent: [https://stateful.mirror.xyz/a151ee1decb2028a8bb48277f6928c6f38319c32601dc1da1ee82acfcad2e525](https://stateful.mirror.xyz/a151ee1decb2028a8bb48277f6928c6f38319c32601dc1da1ee82acfcad2e525)\n2. A transaction that burns a $WRITE token and claims an ENS domain: [https://rinkeby.etherscan.io/tx/0x29b9d13187a2db64b7d85f4ff5be739729b07404fd1f5fce79b3bba13da7530b](https://rinkeby.etherscan.io/tx/0x29b9d13187a2db64b7d85f4ff5be739729b07404fd1f5fce79b3bba13da7530b)\n3. An Arweave transaction that stores Linda's [post](https://linda.mirror.xyz/df649d61efb92c910464a4e74ae213c4cab150b9cbcc4b7fb6090fc77881a95d) forever, along with signatures that prove authorship: [https://viewblock.io/arweave/tx/WvwsHyKCjfkLoKNbNSGfoV-vaWrJa2PMYB_c3wucXUA](https://viewblock.io/arweave/tx/WvwsHyKCjfkLoKNbNSGfoV-vaWrJa2PMYB_c3wucXUA)\n\nIt's exhausting even to think back through the past month and everything we've been able to build out! And the fact that this is *basically working* is very fun and exciting. I'm glad that we also did a fair amount of this \"in public\" and have screen recording our on-boarding sessions.\n\n## What went wrong?\n\nBy tackling so many challenges at once, it sometimes felt like there were an overwhelming number of important issues that urgently needed to be patched. Sometimes, that made it difficult for me to communicate priorities in linear way, so that we were all on the same page and rationally working together on the same thing. Given that that team hadn't worked together before this project, and are just learning about each of our distinct work and communication styles, there was considerable \"under-communication\" that we need to improve on.\n\nThe fast pace also created some disorder. For example, late one Thursday I was configuring the Github Workflows to deploy our AWS EB environment, and it was working well in staging. We didn't deploy to production over the weekend, and during that time I updated production to a whole new AWS EB environment. Our first deploy on Monday shipped to the *outdated* environment, and a bug manifested right before an [onboarding session](https://www.youtube.com/watch?v=8e9Fcf0DiOE)! We had to roll-back to prevent live-streaming a failed onboarding, and it was very confusing! We wrote our first post-mortem for this.\n\n## What lessons were learned?\n\nWe learned that we can really push hard and work quickly to make an ambitious goal a reality within a short timeframe. I think we proved that by hitting the December 25th deadline.\n\nWe also learned a lot about each each and our competencies (there's only three of us), and how we need to communicate with each other to build more trust and confidence in how things are going. That includes over-communicating more about expectations and responsibilities over the codebase and product, outstanding issues, priorities, and individual goals for any given sprint.\n\nExpect more information on $WRITE soon.\n\nIn the meantime, you can read the first entries published on Mirror over the past few weeks:\n\n- [https://stateful.mirror.xyz/](https://stateful.mirror.xyz/) by [@trent_vanepps](https://twitter.com/trent_vanepps)\n- [http://amorfati.mirror.xyz/](http://amorfati.mirror.xyz/) by [@apruden08](https://twitter.com/apruden08)\n- [https://joonian.mirror.xyz/](https://joonian.mirror.xyz/) by [@joonian](https://twitter.com/joonian)\n- [https://helloshreyas.mirror.xyz/](https://helloshreyas.mirror.xyz/) by [@HelloShreyas](https://twitter.com/HelloShreyas)\n- [https://g.mirror.xyz/](https://g.mirror.xyz/) by [@strangechances](https://twitter.com/strangechances)\n- [https://d.mirror.xyz/](https://d.mirror.xyz/) by [@Iiterature](https://twitter.com/Iiterature)", "timestamp": 1610419283, "digest": "B32AHYVIlCf20jjOc7ebm3dv1W7KIBjdw9JB93z3gKY", "contributor": "0x841fF85B6873d7bfB712C8f7A347C774355b6EC3"}
{"id": "Qnb59CDIezVkATsChN3qyNSNA8hgFqlgLf1uAvMbFXU", "title": "Entry 3", "body": "test", "timestamp": 1610419011, "digest": "SJ6723JFLJPVdKeVcSge__-qwlzWpT7_wN94x65rNIE", "contributor": "0x5507dbd48a5A5bAcE8a6030e878cC4E0af147C33"}
{"id": "UkxforUzRJyG5CmT_r-hp3G8wmtfr37lQ4TbWjWkIcw", "title": "Entry 4", "body": "hello", "timestamp": 1610419332, "digest": "xk_oDcSGjlf62wKNmpFb0zbDptGR7oq75vghLkpiCv0", "contributor": "0x5507dbd48a5A5bAcE8a6030e878cC4E0af147C33"}
{"id": "yq0ylUbcIbb6Dw0h_P1xpPFd1gBYfB9WCFXJNMrU9gI", "title": "Entry 5", "body": "123", "timestamp": 1610419367, "digest": "VgkyMYwNCjvBW5doj56fJMZA6-_lLMvgftBblweQyFo", "contributor": "0x5507dbd48a5A5bAcE8a6030e878cC4E0af147C33"}
{"id": "L2Bfug9k519oJOSXOvfyN3KZ8Z1vA7nQDmBX0gWc2pM", "title": "entry 7", "body": "hello", "timestamp": 1610419728, "digest": "piGPlEHrFaf5zhJFRayxSUqJSFhEKJQyrAd9XS_4ljM", "contributor": "0x5507dbd48a5A5bAcE8a6030e878cC4E0af147C33"}
{"id": "utF9b-ZQHMW028sAYyqcDBlo8GOZ7lx7Slj-buUTQCw", "title": "entry 8", "body": "kjshdaasd", "timestamp": 1610419886, "digest": "rpSiKm8LT0mWLEf1mviNfSPIdKv4__i8PvubDnzofPM", "contributor": "0x5507dbd48a5A5bAcE8a6030e878cC4E0af147C33"}
{"id": "9RPXL_A1AVbxouKznOaPSK5T7wmmpmiQhWiXX6ZqtY4", "title": "Formatting Design", "body": "Mirror has the ambitious vision of redefining publishing online by empowering writers with the tools offered by crypto. We are delighted to share that we've officially closed our first full-stack engineering sprint: the MVP of the Mirror blogging platform. This will allow us to onboard our first writers and serve as the foundation for all the functionality in the future.\n\n[a16z](https://a16z.com/)\n\nWe have a lot to figure out over the next few months and years‚Äîfrom discovering new crypto-native business models for creators to supporting basic things like embedding NFTs‚Äîbut we knew that the starting point for the project was supporting a basic publishing experience‚Äîthe ability to post text and share it with the world. \n\n[Mirror‚Äôs first Tweet](https://twitter.com/viamirror/status/1325856116748726273)\n\nThis post details our journey so far.\n\n![Season‚Äôs Greetings!](https://images.mirror-media.xyz/publication-images/bb9a61e1-f524-4135-bae5-91ddf7f0a1e9.jpeg)\n\n## The Starting Line\n\nOur first commit to the backend API was 29 days ago, on December 7, 2020 ‚Äî my (Graeme's) first official day at Mirror. Denis had been speaking with [Trent](https://stateful.mirror.xyz/) about announcing his book on Mirror, and working with Jon-Kyle on designs and UI. We set an ambitious goal to have everything working for Trent by Christmas time ‚Äî our gift to the world! üéÅ \n\n[Steve Reich, Come Out to Show Them](https://www.youtube.com/watch?v=ouYiTiiY3vg)\n\nTo ship the MVP, we needed to make crucial early technical decisions. Most importantly, how to create a world-class writing tool with a native web3 and crypto foundation.\n\n## How to Construct a Web3-Native Writing Platform\n\nOne of the first challenges was thinking through building the platform from a web3 perspective. Here are rules of the web3 game (*via negativa* style):\n\n1. Post content shall not be centralized\n2. The reading experience should not require trust in Mirror\n3. Mirror shall not own a writer's domain\n4. Writers do not need to connect their wallets and sign everything they write\n5. Mirror shall not attempt to store Ethereum private keys in the browser!\n6. Writing shall not be excessively expensive (for Mirror or writers)\n7. Bonus: No using email-password signup!\n\nThe architecture we came up with looks something like this:\n\n![](https://images.mirror-media.xyz/publication-images/4ad92c52-5226-40c1-b654-4bbfe905c278.jpeg)\n\nI will now briefly break down how we solved each of these problems.\n\n### 1. Post content shall not be centralized\n\nWe decided to use the **Arweave** data storage protocol to store user content. Arweave provides permanent storage of data for a one-time cost at upload time. The data posted to Arweave includes all of the information required to *retrieve* all entries for a publication (including any changes made), and to *verify* authorship authenticity. (We have plans to publish the protocol specification along with an open-source tool that can assist with this retrieval and verification process, so that it would be trivial to migrate off of Mirror if the time ever comes for that.)\n\n### 2. The reading experience should not require trust in Mirror\n\nAll entries are signed by a user's *signing key* (this is a non-Ethereum keypair that does not contain any direct economic value. I'll explain more on this later). The signature is then published to Arweave, along with the digest that was signed, and with the content that went into the digest. The *signing key* itself is put into a message that asserts authorship rights, which is then signed by the writer's Ethereum address. All of this information is stored on Arweave, along with the entry's content ‚Äî for every entry and update. Therefore, it's possible (and fairly easy) for anyone to verify whether an entry was authored by a given Ethereum account.\n\nWe're still iterating on this model, and it's obviously very early. Consider us in the \"testnet\" phase of this (along with everything else you read in this post).\n\n### 3. Mirror shall not own a writer's domain\n\nWe use ENS to provide domain ownership to the writer, who claims this ownership by burning an invite token (called $WRITE; expect more information on this soon) during onboarding. The process involves interacting with the $WRITE ERC20 token contract, which grants approval to an ENS registrar contract to burn the token just before registering the ENS label.\n\n### 4. Writers do not need to connect their wallets and sign everything they write\n\nWe didn't want to make it cumbersome to have to write an Entry on Mirror ‚Äî for example, needing to sign everything with their Ledger wallet (or Metamask). Particularly, because we imagine allowing users to take smaller and more frequent actions, too, like commenting on or liking someone else's entry. We still want to have superb security, but we deemed it to be dissuading if writers required their hardware wallet for writing.\n\n### 5. Mirror shall not attempt to store Ethereum private keys in the browser!\n\nIt's considered heresy to store a user's Ethereum private keys directly in the browser, and I would typically agree with that. It's not strictly true that you *couldn't* build a useful webapp this way (Dharma did it for a while), but the security burden will compound over time. This is mainly because there is no way to make and store a non-extractable Ethereum private key using the native web-crypto library; it doesn't support the same ECDSA curve. I don't know how this will play out in the future, but for now, I would say that this is something to avoid.\n\nWe avoid this security burden in two ways: \n\n1. By using a different signature scheme from the Ethereum implementation (we're using the NIST curve *P-256*), therefore making it impossible for the key to \"hold economic value\" at all, and sidestepping a major issue altogether. The worst case scenario, under the most severe threat model (e.g. a stolen computer), would be fraudulent authorship.\n2. By generating the key using the non-extractable property, and storing it in IndexDB. This means that there's no way to export the private key at all ‚Äî the private key can only be used to sign content on the webpage in which it is loaded, and IndexDB prevents it from being loaded on any website outside of mirror.xyz.\n\nI invite criticism on this approach. I am not a cryptography expert, and we're just trying to make an honest effort at a secure and usable platform that lives outside of the conventional standards of web2 that have been failing us. If you want a more detailed explanation of the approach, you can refer to an [internal RFC](https://eng.mirror.xyz/1cywoB2BSXKRdJPA26NmH26AvuIbTJ0p8rYf7KaKktc) about this topic, which has now been posted on Mirror.\n\n### 6. Writing shall not be excessively expensive (for Mirror or writers)\n\nSolved by using Arweave! üéâ Very cheap (at the moment?) ‚Äî it's costing us about 0.00005 AR per blog post, which amounts to about $0.00015, at the current exchange rate.\n\n### 7. Bonus: No using email-password signup!\n\nSince we have signing keys and a signature-based authenticity model, we don't need to have login sessions, and we don't have anything to recover via email. In the future, it may be useful to allow for email notifications and email digests, but for now, it's interesting that there is no email confirmation required to use Mirror. This is the crypto-native way used by apps like Zerion and Zapper, and is the future of authentication on the web.\n\n(We make up for this lack of friction by adding a transaction confirmation in onboarding! üòÇ But even that, we will smooth out over time.)\n\n## Pre-Mainnet Testing\n\nMirror is still in its early stages, and we are using the Ethereum testnet infrastructure to explore our ideas. This allows us to run through complex protocol flows (like burning tokens, deploying contract, and registering ENS domains) very cheaply and with fast confirmation times. In particular, we're still exploring what the *mechanics* of our economic, naming and ownership protocol will be, as demand grows for a more sophisticated system. We're hoping to deploy to mainnet as soon as we know that migrating our early writers to this better protocol will be feasible and easy.\n\n## Building a Backend API as a \"Protocol Gateway\"\n\nIn order to facilitate a good reading and writing experience, we decided to build a backend API that can act as a *gateway* between client and protocol. This allows us to do things like signature verification before publishing to Arweave, or to pay for the Arweave publication ourselves and cache the entry content for extremely fast response-times. This allows us to have a world-class writing and reading experience, while still achieving all of our goals of content decentralization.\n\nIn terms of building this backend API in 2021, there were probably 10+ viable options for where to deploy code and just as many promising languages for its development. Picking early tools can be difficult! I ended up choosing something that was strongly within my realm of competency, and would also be easy for new engineers on our team to learn. I also chose what I believe to be the path of greatest extensibility and flexibility into the future, which for us meant building our backend in **NodeJS on AWS infrastructure**. The decision was not obvious, however, and I wanted to take into account the competencies we would be building as an engineering order in time to come.\n\nSetting up web applications on AWS is much more time consuming than using an abstracted service like Heroku or Vercel. Things like environments, databases, security groups, and deployments all have to be configured up individually. In the long-run, though, it grants more control, and this can be helpful for crypto applications that sometimes had non-standard concerns. It took me about 2 days to set up this infrastructure ‚Äî including security groups, IAM accounts, databases, staging and production environments, etc. But from here, I know that I have the world's best infrastructure behind us, without the platform risk of newer, less fully-featured services.\n\nWe use **Postgres via AWS's RDS service**, and VPC and security groups for communicating between **ElasticBeanstalk** and RDS. We used **GraphQL with Apollo** for our API endpoints.\n\nI'll note here that, for a while before committing to this path, I considered using writing the backend in Golang or Rust, and protobufs, since cryptographic signatures require strict typing for correct validation across platforms. But I know that development would have been *a lot slower* if we had gone this path. On the other hand, building a competency in Rust from the start would have allowed us to track the growing number of interesting layer-2 integrations (which seems promising).\n\nOur deployments are handled through **Github workflows**, such that every push to our *staging* or *main* triggers an action on Github that deploys the application. To be clear, there is a *lot* that still needs to be improved here ‚Äî including blocking deploys on test suites passing, and measuring test coverage. We don't have full integration tests, e.g. against a built docker contains with exposed GraphQL endpoints.\n\n![The genesis entry](https://images.mirror-media.xyz/publication-images/7c3c118d-8dda-4f5d-9e80-6df764fd403c.jpeg)\n\n## Building a Frontend for Blogging\n\nWe decided to use Vercel and NextJS on the frontend, which has wildcard subdomain support, as well as support for statically rendered content. This has been great so far, because we get fast-loading, well-cached content that can be read easily by machines like social media platforms and search engines. It's also generally a fantastic product for managing staging environments, deployments, etc.\n\n## What went well?\n\nWe were able to get an MVP out *really* really quickly ‚Äî we made a goal to ship before Christmas, and only started building the backend some ways into December. So overall, it took us mere weeks to build a novel CMS that uses public-private key signatures to verify content, stores data in Postgres, stores data on Arweave, burns a token on Ethereum to claim ownership of an ENS label, validates ownership of that label, iterations on our signing model, and so on. \n\nHere's a few specific examples of these things:\n\n1. The first blog post by Trent: [https://stateful.mirror.xyz/a151ee1decb2028a8bb48277f6928c6f38319c32601dc1da1ee82acfcad2e525](https://stateful.mirror.xyz/a151ee1decb2028a8bb48277f6928c6f38319c32601dc1da1ee82acfcad2e525)\n2. A transaction that burns a $WRITE token and claims an ENS domain: [https://rinkeby.etherscan.io/tx/0x29b9d13187a2db64b7d85f4ff5be739729b07404fd1f5fce79b3bba13da7530b](https://rinkeby.etherscan.io/tx/0x29b9d13187a2db64b7d85f4ff5be739729b07404fd1f5fce79b3bba13da7530b)\n3. An Arweave transaction that stores Linda's [post](https://linda.mirror.xyz/df649d61efb92c910464a4e74ae213c4cab150b9cbcc4b7fb6090fc77881a95d) forever, along with signatures that prove authorship: [https://viewblock.io/arweave/tx/WvwsHyKCjfkLoKNbNSGfoV-vaWrJa2PMYB_c3wucXUA](https://viewblock.io/arweave/tx/WvwsHyKCjfkLoKNbNSGfoV-vaWrJa2PMYB_c3wucXUA)\n\nIt's exhausting even to think back through the past month and everything we've been able to build out! And the fact that this is *basically working* is very fun and exciting. I'm glad that we also did a fair amount of this \"in public\" and have screen recording our on-boarding sessions.\n\n## What went wrong?\n\nBy tackling so many challenges at once, it sometimes felt like there were an overwhelming number of important issues that urgently needed to be patched. Sometimes, that made it difficult for me to communicate priorities in linear way, so that we were all on the same page and rationally working together on the same thing. Given that that team hadn't worked together before this project, and are just learning about each of our distinct work and communication styles, there was considerable \"under-communication\" that we need to improve on.\n\nThe fast pace also created some disorder. For example, late one Thursday I was configuring the Github Workflows to deploy our AWS EB environment, and it was working well in staging. We didn't deploy to production over the weekend, and during that time I updated production to a whole new AWS EB environment. Our first deploy on Monday shipped to the *outdated* environment, and a bug manifested right before an [onboarding session](https://www.youtube.com/watch?v=8e9Fcf0DiOE)! We had to roll-back to prevent live-streaming a failed onboarding, and it was very confusing! We wrote our first post-mortem for this.\n\n## What lessons were learned?\n\nWe learned that we can really push hard and work quickly to make an ambitious goal a reality within a short timeframe. I think we proved that by hitting the December 25th deadline.\n\nWe also learned a lot about each each and our competencies (there's only three of us), and how we need to communicate with each other to build more trust and confidence in how things are going. That includes over-communicating more about expectations and responsibilities over the codebase and product, outstanding issues, priorities, and individual goals for any given sprint.\n\nExpect more information on $WRITE soon.\n\nIn the meantime, you can read the first entries published on Mirror over the past few weeks:\n\n- [https://stateful.mirror.xyz/](https://stateful.mirror.xyz/) by [@trent_vanepps](https://twitter.com/trent_vanepps)\n- [http://amorfati.mirror.xyz/](http://amorfati.mirror.xyz/) by [@apruden08](https://twitter.com/apruden08)\n- [https://joonian.mirror.xyz/](https://joonian.mirror.xyz/) by [@joonian](https://twitter.com/joonian)\n- [https://helloshreyas.mirror.xyz/](https://helloshreyas.mirror.xyz/) by [@HelloShreyas](https://twitter.com/HelloShreyas)\n- [https://g.mirror.xyz/](https://g.mirror.xyz/) by [@strangechances](https://twitter.com/strangechances)\n- [https://d.mirror.xyz/](https://d.mirror.xyz/) by [@Iiterature](https://twitter.com/Iiterature)", "timestamp": 1610420228, "digest": "B32AHYVIlCf20jjOc7ebm3dv1W7KIBjdw9JB93z3gKY", "contributor": "0x841fF85B6873d7bfB712C8f7A347C774355b6EC3"}
{"id": "S3I0fGAeSwjh_TJZvxe7Pi9e8jYbZKIT4BvS6uPvED4", "title": "Entry 6", "body": "hello", "timestamp": 1610421080, "digest": "_WLVV2qWs60Jz3jpbsnaRjcYgbr6QC3-2hPZ-A3xEtM", "contributor": "0x5507dbd48a5A5bAcE8a6030e878cC4E0af147C33"}
{"id": "Tn6XTbMDOGS9eDCBuXBxUwDRgEhFJ1Pzl31xFtLLJCc", "title": "Entry 7", "body": "Hello", "timestamp": 1610421100, "digest": "zlqXwSfsuTeN5kf5oPbOJKbc1SA7wEqXKkTfovDL8l8", "contributor": "0x5507dbd48a5A5bAcE8a6030e878cC4E0af147C33"}
{"id": "JnttXkKFtxp0Cynl0W2ehpjHDYzsZMvPHkwBJrp4jA4", "title": "Entry 7 V2", "body": "Hello", "timestamp": 1610421161, "digest": "zlqXwSfsuTeN5kf5oPbOJKbc1SA7wEqXKkTfovDL8l8", "contributor": "0x5507dbd48a5A5bAcE8a6030e878cC4E0af147C33"}
{"id": "L7yMLD2KzdSBGI74uWCzvLgZDaEyw3-3r0gYTWgzoL0", "title": "Entry 6 V2", "body": "hello", "timestamp": 1610421188, "digest": "_WLVV2qWs60Jz3jpbsnaRjcYgbr6QC3-2hPZ-A3xEtM", "contributor": "0x5507dbd48a5A5bAcE8a6030e878cC4E0af147C33"}
{"id": "BCyqlD3X4A2_ii_-fDECEdsPfa8cswrjk0V6yGJHGdo", "title": "Entry 4 V2", "body": "hello", "timestamp": 1610421581, "digest": "xk_oDcSGjlf62wKNmpFb0zbDptGR7oq75vghLkpiCv0", "contributor": "0x5507dbd48a5A5bAcE8a6030e878cC4E0af147C33"}
{"id": "TSRZ2TQQUcDrRyIcZYg5UqEXY9AE9vXXDcA2iw0BFdM", "title": "Entry 4 V3", "body": "hello", "timestamp": 1610421679, "digest": "xk_oDcSGjlf62wKNmpFb0zbDptGR7oq75vghLkpiCv0", "contributor": "0x5507dbd48a5A5bAcE8a6030e878cC4E0af147C33"}
{"id": "vF80jODkkucBAQnc_cSz87bEgHQjo7dnO5X2YdMJFKY", "title": "Entry 4 V4", "body": "hello", "timestamp": 1610421708, "digest": "xk_oDcSGjlf62wKNmpFb0zbDptGR7oq75vghLkpiCv0", "contributor": "0x5507dbd48a5A5bAcE8a6030e878cC4E0af147C33"}
{"id": "HVCAoRHbWEQVCECwUE9rioutZbEAWXwy30yFCfvnqSs", "title": "Entry 4 V6", "body": "hello", "timestamp": 1610422198, "digest": "xk_oDcSGjlf62wKNmpFb0zbDptGR7oq75vghLkpiCv0", "contributor": "0x5507dbd48a5A5bAcE8a6030e878cC4E0af147C33"}
{"id": "hW0cgrTsTSIl5Yhz2ULY3iAglh_YPFpNYZwF7ELrfrA", "title": "Entry 4 V5", "body": "hello", "timestamp": 1610422185, "digest": "xk_oDcSGjlf62wKNmpFb0zbDptGR7oq75vghLkpiCv0", "contributor": "0x5507dbd48a5A5bAcE8a6030e878cC4E0af147C33"}
{"id": "3VNOOJcQfr1gtOuia71IdP3TgWAUYOwIC_uOZxcFQjk", "title": "Signing Keys, Multi-Device, and the Fundamental UI problem in Crypto", "body": "This weekend I was away from my computer for the weekend. Because entries on Mirror require signatures, and private keys live on the device, I was unable to post an entry. This relates to the fundament crypto UI problem:\n\n> The browser is a sandboxed OS; every flavor of app/game/UI will be efficiently and safely executable within this container, but we don't store private keys in-browser, and users don't all carry private keys all the time. Metamask is a bridge between the browser and your keys, but it's not safe; we call it a kind of \"hot-wallet\" since it's always connected to the internet, and therefore at higher risk of being hacked. [Read more on this tweet thread](https://twitter.com/strangechances/status/1317851457673064448?s=20)\n\nFiguring out this interaction will be a breakthrough, and I can see it as something that Apple might be able to do -- through a [secure enclave](https://support.apple.com/guide/security/secure-enclave-overview-sec59b0b31ff/web) for your private keys built into your phone. It would be typical for Apple to wait until the crypto space is mature, and then create a beautiful solution to the biggest design problem, working from first principles -- not as a browser extension (Metamask), app (Dharma, Argent) or hardware wallet (Ledger), but as something that's a core part of your phone's hardware.\n\nIn any case, for Mirror, we do store the private key in the browser for signing entry (we call it a \"signing key\"), but it's not an Ethereum key that we store. The private key we store is a non-exportable type that can never be shared and cannot hold economic value. In the future, adding new devices will be quite easy to do, simply by creating a new signing key on the new device, and then sending that key to the original device to be signed by an Ethereum wallet.\n\nSoon, I'd like to validate if we're able to set up a mobile Chrome browser to be able to write to Mirror, using this method.\n\n## Other thoughts\n\nI watched an interesting video today called \"Data Dignity\", between [Jaron Lanier](https://en.wikipedia.org/wiki/Jaron_Lanier), and [Avital Balwit](https://twitter.com/avitalbalwit?lang=en) from [Radical Exchange](https://www.radicalxchange.org/). It relates to the economic models that \"Big Tech\" use, and how those create perverse and confusing incentives. It also tackles the ideology rooted in many of these companies that views humans as merely tools to help a rapidly evolving technological \"intelligence\"; he depicts us as ritualistically sacrificing our data to grow this emergent intelligence, and then hand-wringing over things like UBI because AI will take all the jobs.\n\nJaron is a quirky genius, and I want to read everything that he's written.\n[Watch interview on YouTube](https://www.youtube.com/watch?v=BJqY34i08Uw)\n\n![View from my hike in Berkeley](https://images.mirror-media.xyz/publication-images/11541f81-7c25-46a8-8b50-c7490664f965.jpeg)\n\nP.S. Programming is a game (rules = syntax + compiler). Having a brain that enjoys this kind of game is rewarding, because you can make a decent salary playing games.", "timestamp": 1610439302, "digest": "FNo46PS21mjaAVLu-Nt1HeJT_yH-8lnm0W-HsjG6px8", "contributor": "0xCC65fA278B917042822538c44ba10AD646824026"}
{"id": "BsrwnYHLOXlWocqhpbd4Wu_wU4b8EjAdEJFmDi1Hfwc", "title": "Signing Keys, Multi-Device, and the Fundamental UI Problem in Crypto", "body": "I was away from my computer this the weekend, hiking in Berkeley (photos below). Because posting entries on Mirror require a device signature, and private keys are on my computer browser, I was unable to post an entry. This relates to the fundament crypto UI problem:\n\n> The browser is a sandboxed OS; every flavor of app/game/UI will be efficiently and safely executable within this container, but we don't store private keys in-browser, and users don't all carry private keys all the time. Metamask is a bridge between the browser and your keys, but it's not safe; we call it a kind of \"hot-wallet\" since it's always connected to the internet, and therefore at higher risk of being hacked. [Read more on this tweet thread](https://twitter.com/strangechances/status/1317851457673064448?s=20)\n\nFiguring out this interaction will be a breakthrough, and I can see it as something that Apple might be able to do -- through a [secure enclave](https://support.apple.com/guide/security/secure-enclave-overview-sec59b0b31ff/web) for your private keys built into your phone. It would be typical for Apple to wait until the crypto space is mature, and then create a beautiful solution to the biggest design problem, working from first principles -- not as a browser extension (Metamask), app (Dharma, Argent) or hardware wallet (Ledger), but as something that's a core part of your phone's hardware.\n\nIn any case, for Mirror, we do store the private key in the browser for signing entry (we call it a \"signing key\"), but it's not an Ethereum key that we store. The private key we store is a non-exportable type that can never be shared and cannot hold economic value. In the future, adding new devices will be quite easy to do, simply by creating a new signing key on the new device, and then sending that key to the original device to be signed by an Ethereum wallet.\n\nSoon, I'd like to validate if we're able to set up a mobile Chrome browser to be able to write to Mirror, using this method.\n\n## Other thoughts\n\nI watched an interesting video today called \"Data Dignity\", between [Jaron Lanier](https://en.wikipedia.org/wiki/Jaron_Lanier), and [Avital Balwit](https://twitter.com/avitalbalwit?lang=en) from [Radical Exchange](https://www.radicalxchange.org/). It relates to the economic models that \"Big Tech\" use, and how those create perverse and confusing incentives. It also tackles the ideology rooted in many of these companies that views humans as merely tools to help a rapidly evolving technological \"intelligence\"; he depicts us as ritualistically sacrificing our data to grow this emergent intelligence, and then hand-wringing over things like UBI because AI will take all the jobs.\n\nJaron is a quirky genius, and I want to read everything that he's written.\n[Watch interview on YouTube](https://www.youtube.com/watch?v=BJqY34i08Uw)\n\n![View from my hike in Berkeley](https://images.mirror-media.xyz/publication-images/11541f81-7c25-46a8-8b50-c7490664f965.jpeg)\n\nP.S. Programming is a game (rules = syntax + compiler). Having a brain that enjoys this kind of game is rewarding, because you can make a decent salary playing games.", "timestamp": 1610439388, "digest": "FNo46PS21mjaAVLu-Nt1HeJT_yH-8lnm0W-HsjG6px8", "contributor": "0xCC65fA278B917042822538c44ba10AD646824026"}
{"id": "dB16VG_1x38sa8DCQJRsXsZxQjCVFvBF44nguymzGkA", "title": "Signing Keys, Multi-Device, and the Fundamental UI Problem in Crypto", "body": "I was away from my computer this the weekend, hiking in Berkeley (photos below). Because posting entries on Mirror require a device signature, and the private keys are on my computer browser, I was unable to post an entry. This relates to the fundament crypto UI problem:\n\n> The browser is a sandboxed OS; every flavor of app/game/UI will be efficiently and safely executable within this container, but we don't store private keys in-browser, and users don't all carry private keys all the time. Metamask is a bridge between the browser and your keys, but it's not safe; we call it a kind of \"hot-wallet\" since it's always connected to the internet, and therefore at higher risk of being hacked. [Read more on this tweet thread](https://twitter.com/strangechances/status/1317851457673064448?s=20)\n\nFiguring out this interaction will be a breakthrough, and I can see it as something that Apple might be able to do -- through a [secure enclave](https://support.apple.com/guide/security/secure-enclave-overview-sec59b0b31ff/web) for your private keys built into your phone. It would be typical for Apple to wait until the crypto space is mature, and then create a beautiful solution to the biggest design problem, working from first principles -- not as a browser extension (Metamask), app (Dharma, Argent) or hardware wallet (Ledger), but as something that's a core part of your phone's hardware.\n\nIn any case, for Mirror, we do store the private key in the browser for signing entry (we call it a \"signing key\"), but it's not an Ethereum key that we store. The private key we store is a non-exportable type that can never be shared and cannot hold economic value. In the future, adding new devices will be quite easy to do, simply by creating a new signing key on the new device, and then sending that key to the original device to be signed by an Ethereum wallet.\n\nSoon, I'd like to validate if we're able to set up a mobile Chrome browser to be able to write to Mirror, using this method.\n\n## Other thoughts\n\nI watched an interesting video today called \"Data Dignity\", between [Jaron Lanier](https://en.wikipedia.org/wiki/Jaron_Lanier), and [Avital Balwit](https://twitter.com/avitalbalwit?lang=en) from [Radical Exchange](https://www.radicalxchange.org/). It relates to the economic models that \"Big Tech\" use, and how those create perverse and confusing incentives. It also tackles the ideology rooted in many of these companies that views humans as merely tools to help a rapidly evolving technological \"intelligence\"; he depicts us as ritualistically sacrificing our data to grow this emergent intelligence, and then hand-wringing over things like UBI because AI will take all the jobs.\n\nJaron is a quirky genius, and I want to read everything that he's written.\n[Watch interview on YouTube](https://www.youtube.com/watch?v=BJqY34i08Uw)\n\n![View from my hike in Berkeley (Grizzly Peak)](https://images.mirror-media.xyz/publication-images/11541f81-7c25-46a8-8b50-c7490664f965.jpeg)\n\n![](https://images.mirror-media.xyz/publication-images/2d17b348-ffda-4132-95dd-a9cfef8411e4.jpeg)\n\nP.S. Programming is a game (rules = syntax + compiler). Having a brain that enjoys this kind of game is rewarding, because you can make a decent salary playing games.", "timestamp": 1610439532, "digest": "FNo46PS21mjaAVLu-Nt1HeJT_yH-8lnm0W-HsjG6px8", "contributor": "0xCC65fA278B917042822538c44ba10AD646824026"}
{"id": "OUwKWxdR4nKo656ma8OIoIbNuhYwSZ6ssqX4Cy0YbMs", "title": "Signing Keys, Multi-Device, and the Fundamental UI Problem in Crypto", "body": "I was away from my computer this the weekend, hiking in Berkeley (photos below). Because posting entries on Mirror require a device signature, and private keys are on my computer browser, I was unable to post an entry. This relates to the fundament crypto UI problem:\n\n> The browser is a sandboxed OS; every flavor of app/game/UI will be efficiently and safely executable within this container, but we don't store private keys in-browser, and users don't all carry private keys all the time. Metamask is a bridge between the browser and your keys, but it's not safe; we call it a kind of \"hot-wallet\" since it's always connected to the internet, and therefore at higher risk of being hacked. [Read more on this tweet thread](https://twitter.com/strangechances/status/1317851457673064448?s=20)\n\nFiguring out this interaction will be a breakthrough, and I can see it as something that Apple might be able to do -- through a [secure enclave](https://support.apple.com/guide/security/secure-enclave-overview-sec59b0b31ff/web) for your private keys built into your phone. It would be typical for Apple to wait until the crypto space is mature, and then create a beautiful solution to the biggest design problem, working from first principles -- not as a browser extension (Metamask), app (Dharma, Argent) or hardware wallet (Ledger), but as something that's a core part of your phone's hardware.\n\nIn any case, for Mirror, we do store the private key in the browser for signing entry (we call it a \"signing key\"), but it's not an Ethereum key that we store. The private key we store is a non-exportable type that can never be shared and cannot hold economic value. In the future, adding new devices will be quite easy to do, simply by creating a new signing key on the new device, and then sending that key to the original device to be signed by an Ethereum wallet.\n\nSoon, I'd like to validate if we're able to set up a mobile Chrome browser to be able to write to Mirror, using this method.\n\n## Other thoughts\n\nI watched an interesting video today called \"Data Dignity\", between [Jaron Lanier](https://en.wikipedia.org/wiki/Jaron_Lanier), and [Avital Balwit](https://twitter.com/avitalbalwit?lang=en) from [Radical Exchange](https://www.radicalxchange.org/). It relates to the economic models that \"Big Tech\" use, and how those create perverse and confusing incentives. It also tackles the ideology rooted in many of these companies that views humans as merely tools to help a rapidly evolving technological \"intelligence\"; he depicts us as ritualistically sacrificing our data to grow this emergent intelligence, and then hand-wringing over things like UBI because AI will take all the jobs.\n\nJaron is a quirky genius, and I want to read everything that he's written.\n[Watch interview on YouTube](https://www.youtube.com/watch?v=BJqY34i08Uw)\n\n![View from my hike in Berkeley (Grizzly Peak)](https://images.mirror-media.xyz/publication-images/11541f81-7c25-46a8-8b50-c7490664f965.jpeg)\n\n![](https://images.mirror-media.xyz/publication-images/2d17b348-ffda-4132-95dd-a9cfef8411e4.jpeg)\n\nP.S. Programming is a game (rules = syntax + compiler). Having a brain that enjoys this kind of game is rewarding, because you can make a decent salary playing games.", "timestamp": 1610439479, "digest": "FNo46PS21mjaAVLu-Nt1HeJT_yH-8lnm0W-HsjG6px8", "contributor": "0xCC65fA278B917042822538c44ba10AD646824026"}
{"id": "VVLjCXlM0cwH11zM1X1dz5iio0xhs8a5sVkCRRkD83w", "title": "Signing Keys, Multi-Device, and the Fundamental UI Problem in Crypto", "body": "This weekend I was away from my computer for the weekend. Because entries on Mirror require signatures, and private keys live on the device, I was unable to post an entry. This relates to the fundament crypto UI problem:\n\n> The browser is a sandboxed OS; every flavor of app/game/UI will be efficiently and safely executable within this container, but we don't store private keys in-browser, and users don't all carry private keys all the time. Metamask is a bridge between the browser and your keys, but it's not safe; we call it a kind of \"hot-wallet\" since it's always connected to the internet, and therefore at higher risk of being hacked. [Read more on this tweet thread](https://twitter.com/strangechances/status/1317851457673064448?s=20)\n\nFiguring out this interaction will be a breakthrough, and I can see it as something that Apple might be able to do -- through a [secure enclave](https://support.apple.com/guide/security/secure-enclave-overview-sec59b0b31ff/web) for your private keys built into your phone. It would be typical for Apple to wait until the crypto space is mature, and then create a beautiful solution to the biggest design problem, working from first principles -- not as a browser extension (Metamask), app (Dharma, Argent) or hardware wallet (Ledger), but as something that's a core part of your phone's hardware.\n\nIn any case, for Mirror, we do store the private key in the browser for signing entry (we call it a \"signing key\"), but it's not an Ethereum key that we store. The private key we store is a non-exportable type that can never be shared and cannot hold economic value. In the future, adding new devices will be quite easy to do, simply by creating a new signing key on the new device, and then sending that key to the original device to be signed by an Ethereum wallet.\n\nSoon, I'd like to validate if we're able to set up a mobile Chrome browser to be able to write to Mirror, using this method.\n\n## Other thoughts\n\nI watched an interesting video today called \"Data Dignity\", between [Jaron Lanier](https://en.wikipedia.org/wiki/Jaron_Lanier), and [Avital Balwit](https://twitter.com/avitalbalwit?lang=en) from [Radical Exchange](https://www.radicalxchange.org/). It relates to the economic models that \"Big Tech\" use, and how those create perverse and confusing incentives. It also tackles the ideology rooted in many of these companies that views humans as merely tools to help a rapidly evolving technological \"intelligence\"; he depicts us as ritualistically sacrificing our data to grow this emergent intelligence, and then hand-wringing over things like UBI because AI will take all the jobs.\n\nJaron is a quirky genius, and I want to read everything that he's written.\n[Watch interview on YouTube](https://www.youtube.com/watch?v=BJqY34i08Uw)\n\n![View from my hike in Berkeley](https://images.mirror-media.xyz/publication-images/11541f81-7c25-46a8-8b50-c7490664f965.jpeg)\n\nP.S. Programming is a game (rules = syntax + compiler). Having a brain that enjoys this kind of game is rewarding, because you can make a decent salary playing games.", "timestamp": 1610439328, "digest": "FNo46PS21mjaAVLu-Nt1HeJT_yH-8lnm0W-HsjG6px8", "contributor": "0xCC65fA278B917042822538c44ba10AD646824026"}
{"id": "jS2j-g61Rkk558PakR4JvjjnuawvxMzEwuk__NavL2I", "title": "NFT Subculture", "body": "Established art cultures online and in the physical world won't be early adopters of NFTs. A crypto-native subculture will emerge around the medium first.\n\nLet's look at two subcultures that may provide inspiration for how NFTs might evolve:\n\n- Photography as an art form\n- Streetwear as fashion\n\nPhotography was rejected by the art establishment until late in the 20th century, almost a century after it was invented.\n\n> They saw photography merely as a thoughtless mechanism for replication, one that lacked, ‚Äúthat refined feeling and sentiment which animate the productions of a man of genius.‚Äù [source](https://daily.jstor.org/when-photography-was-not-art/)\n\nStreetwear, similarly, was seen as a low form of fashion consumed by a low-brow audience.\n\nSome important properties of disruptive subcultures:\n\n**Practiced by outsiders**\n- Photography: Camera equipment tinkerers\n- Streetwear: Skater kids\n\n**Considered culturally inferior**\n- Photography: Not art, cannot be considered higher than an engraving\n- Streetwear: Just logos on sweatshirts, no appreciation for craft or materials\n\n**New marketplaces and connoisseurship criteria**\n- Photography: Collector community outside of ‚Äúart world‚Äù\n- Streetwear: Bespoke online and retail marketplaces\n\nBoth result in controversy and a rejection of the new form among the old guard. Both are initially adopted by outsiders to the dominant culture.\n\nEventually, the old guard starts to slowly embrace the new medium, because the economic and cultural opportunities are too big. Finally, the new culture is merged wholesale into the old.\n\nNFT culture will evolve following a similar trajectory. NFT art won‚Äôt be taken seriously by the art world at first. Crypto-natives will blaze their unique path and create a new culture.\n\nThe best example of NFT culture today may be community  \"portraits\" of crypto founders. Every civilization valorizes its heroes through art, and crypto is no different.", "timestamp": 1610476975, "digest": "OQrTGdbiDDKs-7it-URF2NYRG9xLMYEQcNnET8fah3I", "contributor": "0x5507dbd48a5A5bAcE8a6030e878cC4E0af147C33"}
{"id": "tJZ5SfeNpozymo-Hnyt3wYY5ZNLn_G2t7seOWPGwgVw", "title": "Formatting Design", "body": "Mirror has the ambitious vision of redefining publishing online by empowering writers with the tools offered by crypto. We are delighted to share that we've officially closed our first full-stack engineering sprint: the MVP of the Mirror blogging platform. This will allow us to onboard our first writers and serve as the foundation for all the functionality in the future.\n\n[a16z](https://a16z.com/)\n\nWe have a lot to figure out over the next few months and years‚Äîfrom discovering new crypto-native business models for creators to supporting basic things like embedding NFTs‚Äîbut we knew that the starting point for the project was supporting a basic publishing experience‚Äîthe ability to post text and share it with the world. \n\n[Mirror‚Äôs first Tweet](https://twitter.com/viamirror/status/1325856116748726273)\n\nThis post details our journey so far.\n\n![Season‚Äôs Greetings!](https://images.mirror-media.xyz/publication-images/bb9a61e1-f524-4135-bae5-91ddf7f0a1e9.jpeg?width=2560&height=1440)\n\n## The Starting Line\n\nOur first commit to the backend API was 29 days ago, on December 7, 2020 ‚Äî my (Graeme's) first official day at Mirror. Denis had been speaking with [Trent](https://stateful.mirror.xyz/) about announcing his book on Mirror, and working with Jon-Kyle on designs and UI. We set an ambitious goal to have everything working for Trent by Christmas time ‚Äî our gift to the world! üéÅ \n\n[Steve Reich, Come Out to Show Them](https://www.youtube.com/watch?v=ouYiTiiY3vg)\n\nTo ship the MVP, we needed to make crucial early technical decisions. Most importantly, how to create a world-class writing tool with a native web3 and crypto foundation.\n\n## How to Construct a Web3-Native Writing Platform\n\nOne of the first challenges was thinking through building the platform from a web3 perspective. Here are rules of the web3 game (*via negativa* style):\n\n1. Post content shall not be centralized\n2. The reading experience should not require trust in Mirror\n3. Mirror shall not own a writer's domain\n4. Writers do not need to connect their wallets and sign everything they write\n5. Mirror shall not attempt to store Ethereum private keys in the browser!\n6. Writing shall not be excessively expensive (for Mirror or writers)\n7. Bonus: No using email-password signup!\n\nThe architecture we came up with looks something like this:\n\n![](https://images.mirror-media.xyz/publication-images/4ad92c52-5226-40c1-b654-4bbfe905c278.jpeg)\n\nI will now briefly break down how we solved each of these problems.\n\n### 1. Post content shall not be centralized\n\nWe decided to use the **Arweave** data storage protocol to store user content. Arweave provides permanent storage of data for a one-time cost at upload time. The data posted to Arweave includes all of the information required to *retrieve* all entries for a publication (including any changes made), and to *verify* authorship authenticity. (We have plans to publish the protocol specification along with an open-source tool that can assist with this retrieval and verification process, so that it would be trivial to migrate off of Mirror if the time ever comes for that.)\n\n### 2. The reading experience should not require trust in Mirror\n\nAll entries are signed by a user's *signing key* (this is a non-Ethereum keypair that does not contain any direct economic value. I'll explain more on this later). The signature is then published to Arweave, along with the digest that was signed, and with the content that went into the digest. The *signing key* itself is put into a message that asserts authorship rights, which is then signed by the writer's Ethereum address. All of this information is stored on Arweave, along with the entry's content ‚Äî for every entry and update. Therefore, it's possible (and fairly easy) for anyone to verify whether an entry was authored by a given Ethereum account.\n\nWe're still iterating on this model, and it's obviously very early. Consider us in the \"testnet\" phase of this (along with everything else you read in this post).\n\n### 3. Mirror shall not own a writer's domain\n\nWe use ENS to provide domain ownership to the writer, who claims this ownership by burning an invite token (called $WRITE; expect more information on this soon) during onboarding. The process involves interacting with the $WRITE ERC20 token contract, which grants approval to an ENS registrar contract to burn the token just before registering the ENS label.\n\n### 4. Writers do not need to connect their wallets and sign everything they write\n\nWe didn't want to make it cumbersome to have to write an Entry on Mirror ‚Äî for example, needing to sign everything with their Ledger wallet (or Metamask). Particularly, because we imagine allowing users to take smaller and more frequent actions, too, like commenting on or liking someone else's entry. We still want to have superb security, but we deemed it to be dissuading if writers required their hardware wallet for writing.\n\n### 5. Mirror shall not attempt to store Ethereum private keys in the browser!\n\nIt's considered heresy to store a user's Ethereum private keys directly in the browser, and I would typically agree with that. It's not strictly true that you *couldn't* build a useful webapp this way (Dharma did it for a while), but the security burden will compound over time. This is mainly because there is no way to make and store a non-extractable Ethereum private key using the native web-crypto library; it doesn't support the same ECDSA curve. I don't know how this will play out in the future, but for now, I would say that this is something to avoid.\n\nWe avoid this security burden in two ways: \n\n1. By using a different signature scheme from the Ethereum implementation (we're using the NIST curve *P-256*), therefore making it impossible for the key to \"hold economic value\" at all, and sidestepping a major issue altogether. The worst case scenario, under the most severe threat model (e.g. a stolen computer), would be fraudulent authorship.\n2. By generating the key using the non-extractable property, and storing it in IndexDB. This means that there's no way to export the private key at all ‚Äî the private key can only be used to sign content on the webpage in which it is loaded, and IndexDB prevents it from being loaded on any website outside of mirror.xyz.\n\nI invite criticism on this approach. I am not a cryptography expert, and we're just trying to make an honest effort at a secure and usable platform that lives outside of the conventional standards of web2 that have been failing us. If you want a more detailed explanation of the approach, you can refer to an [internal RFC](https://eng.mirror.xyz/1cywoB2BSXKRdJPA26NmH26AvuIbTJ0p8rYf7KaKktc) about this topic, which has now been posted on Mirror.\n\n### 6. Writing shall not be excessively expensive (for Mirror or writers)\n\nSolved by using Arweave! üéâ Very cheap (at the moment?) ‚Äî it's costing us about 0.00005 AR per blog post, which amounts to about $0.00015, at the current exchange rate.\n\n### 7. Bonus: No using email-password signup!\n\nSince we have signing keys and a signature-based authenticity model, we don't need to have login sessions, and we don't have anything to recover via email. In the future, it may be useful to allow for email notifications and email digests, but for now, it's interesting that there is no email confirmation required to use Mirror. This is the crypto-native way used by apps like Zerion and Zapper, and is the future of authentication on the web.\n\n(We make up for this lack of friction by adding a transaction confirmation in onboarding! üòÇ But even that, we will smooth out over time.)\n\n## Pre-Mainnet Testing\n\nMirror is still in its early stages, and we are using the Ethereum testnet infrastructure to explore our ideas. This allows us to run through complex protocol flows (like burning tokens, deploying contract, and registering ENS domains) very cheaply and with fast confirmation times. In particular, we're still exploring what the *mechanics* of our economic, naming and ownership protocol will be, as demand grows for a more sophisticated system. We're hoping to deploy to mainnet as soon as we know that migrating our early writers to this better protocol will be feasible and easy.\n\n## Building a Backend API as a \"Protocol Gateway\"\n\nIn order to facilitate a good reading and writing experience, we decided to build a backend API that can act as a *gateway* between client and protocol. This allows us to do things like signature verification before publishing to Arweave, or to pay for the Arweave publication ourselves and cache the entry content for extremely fast response-times. This allows us to have a world-class writing and reading experience, while still achieving all of our goals of content decentralization.\n\nIn terms of building this backend API in 2021, there were probably 10+ viable options for where to deploy code and just as many promising languages for its development. Picking early tools can be difficult! I ended up choosing something that was strongly within my realm of competency, and would also be easy for new engineers on our team to learn. I also chose what I believe to be the path of greatest extensibility and flexibility into the future, which for us meant building our backend in **NodeJS on AWS infrastructure**. The decision was not obvious, however, and I wanted to take into account the competencies we would be building as an engineering order in time to come.\n\nSetting up web applications on AWS is much more time consuming than using an abstracted service like Heroku or Vercel. Things like environments, databases, security groups, and deployments all have to be configured up individually. In the long-run, though, it grants more control, and this can be helpful for crypto applications that sometimes had non-standard concerns. It took me about 2 days to set up this infrastructure ‚Äî including security groups, IAM accounts, databases, staging and production environments, etc. But from here, I know that I have the world's best infrastructure behind us, without the platform risk of newer, less fully-featured services.\n\nWe use **Postgres via AWS's RDS service**, and VPC and security groups for communicating between **ElasticBeanstalk** and RDS. We used **GraphQL with Apollo** for our API endpoints.\n\nI'll note here that, for a while before committing to this path, I considered using writing the backend in Golang or Rust, and protobufs, since cryptographic signatures require strict typing for correct validation across platforms. But I know that development would have been *a lot slower* if we had gone this path. On the other hand, building a competency in Rust from the start would have allowed us to track the growing number of interesting layer-2 integrations (which seems promising).\n\nOur deployments are handled through **Github workflows**, such that every push to our *staging* or *main* triggers an action on Github that deploys the application. To be clear, there is a *lot* that still needs to be improved here ‚Äî including blocking deploys on test suites passing, and measuring test coverage. We don't have full integration tests, e.g. against a built docker contains with exposed GraphQL endpoints.\n\n![The genesis entry](https://images.mirror-media.xyz/publication-images/7c3c118d-8dda-4f5d-9e80-6df764fd403c.jpeg)\n\n## Building a Frontend for Blogging\n\nWe decided to use Vercel and NextJS on the frontend, which has wildcard subdomain support, as well as support for statically rendered content. This has been great so far, because we get fast-loading, well-cached content that can be read easily by machines like social media platforms and search engines. It's also generally a fantastic product for managing staging environments, deployments, etc.\n\n## What went well?\n\nWe were able to get an MVP out *really* really quickly ‚Äî we made a goal to ship before Christmas, and only started building the backend some ways into December. So overall, it took us mere weeks to build a novel CMS that uses public-private key signatures to verify content, stores data in Postgres, stores data on Arweave, burns a token on Ethereum to claim ownership of an ENS label, validates ownership of that label, iterations on our signing model, and so on. \n\nHere's a few specific examples of these things:\n\n1. The first blog post by Trent: [https://stateful.mirror.xyz/a151ee1decb2028a8bb48277f6928c6f38319c32601dc1da1ee82acfcad2e525](https://stateful.mirror.xyz/a151ee1decb2028a8bb48277f6928c6f38319c32601dc1da1ee82acfcad2e525)\n2. A transaction that burns a $WRITE token and claims an ENS domain: [https://rinkeby.etherscan.io/tx/0x29b9d13187a2db64b7d85f4ff5be739729b07404fd1f5fce79b3bba13da7530b](https://rinkeby.etherscan.io/tx/0x29b9d13187a2db64b7d85f4ff5be739729b07404fd1f5fce79b3bba13da7530b)\n3. An Arweave transaction that stores Linda's [post](https://linda.mirror.xyz/df649d61efb92c910464a4e74ae213c4cab150b9cbcc4b7fb6090fc77881a95d) forever, along with signatures that prove authorship: [https://viewblock.io/arweave/tx/WvwsHyKCjfkLoKNbNSGfoV-vaWrJa2PMYB_c3wucXUA](https://viewblock.io/arweave/tx/WvwsHyKCjfkLoKNbNSGfoV-vaWrJa2PMYB_c3wucXUA)\n\nIt's exhausting even to think back through the past month and everything we've been able to build out! And the fact that this is *basically working* is very fun and exciting. I'm glad that we also did a fair amount of this \"in public\" and have screen recording our on-boarding sessions.\n\n## What went wrong?\n\nBy tackling so many challenges at once, it sometimes felt like there were an overwhelming number of important issues that urgently needed to be patched. Sometimes, that made it difficult for me to communicate priorities in linear way, so that we were all on the same page and rationally working together on the same thing. Given that that team hadn't worked together before this project, and are just learning about each of our distinct work and communication styles, there was considerable \"under-communication\" that we need to improve on.\n\nThe fast pace also created some disorder. For example, late one Thursday I was configuring the Github Workflows to deploy our AWS EB environment, and it was working well in staging. We didn't deploy to production over the weekend, and during that time I updated production to a whole new AWS EB environment. Our first deploy on Monday shipped to the *outdated* environment, and a bug manifested right before an [onboarding session](https://www.youtube.com/watch?v=8e9Fcf0DiOE)! We had to roll-back to prevent live-streaming a failed onboarding, and it was very confusing! We wrote our first post-mortem for this.\n\n## What lessons were learned?\n\nWe learned that we can really push hard and work quickly to make an ambitious goal a reality within a short timeframe. I think we proved that by hitting the December 25th deadline.\n\nWe also learned a lot about each each and our competencies (there's only three of us), and how we need to communicate with each other to build more trust and confidence in how things are going. That includes over-communicating more about expectations and responsibilities over the codebase and product, outstanding issues, priorities, and individual goals for any given sprint.\n\nExpect more information on $WRITE soon.\n\nIn the meantime, you can read the first entries published on Mirror over the past few weeks:\n\n- [https://stateful.mirror.xyz/](https://stateful.mirror.xyz/) by [@trent_vanepps](https://twitter.com/trent_vanepps)\n- [http://amorfati.mirror.xyz/](http://amorfati.mirror.xyz/) by [@apruden08](https://twitter.com/apruden08)\n- [https://joonian.mirror.xyz/](https://joonian.mirror.xyz/) by [@joonian](https://twitter.com/joonian)\n- [https://helloshreyas.mirror.xyz/](https://helloshreyas.mirror.xyz/) by [@HelloShreyas](https://twitter.com/HelloShreyas)\n- [https://g.mirror.xyz/](https://g.mirror.xyz/) by [@strangechances](https://twitter.com/strangechances)\n- [https://d.mirror.xyz/](https://d.mirror.xyz/) by [@Iiterature](https://twitter.com/Iiterature)", "timestamp": 1610476656, "digest": "B32AHYVIlCf20jjOc7ebm3dv1W7KIBjdw9JB93z3gKY", "contributor": "0x841fF85B6873d7bfB712C8f7A347C774355b6EC3"}
{"id": "fTAVGMZzYZ3zpyShcIRTbmKiJN7l5Rp7kIK006qPhpY", "title": "Production post", "body": "This is testing the updated media block embeds.\n\n[Onboarding example](https://www.youtube.com/watch?v=BknKzD2qsQs)\n\nNice!", "timestamp": 1610478865, "digest": "be8fc5b47c24f60f26e2e5b68a657c7bbf18476bdb41767084941c1be9a870bc", "contributor": "0x841fF85B6873d7bfB712C8f7A347C774355b6EC3"}
{"id": "drrtfN1aXEOWGZcsIN5PtC3TskXJAWSCjANgje9lwnk", "title": "Production post", "body": "This is testing the updated media block embeds.\n\n[Onboarding example](https://www.youtube.com/watch?v=BknKzD2qsQs)\n\nNice!\n\n[Tweet example](https://twitter.com/Iiterature/status/1346952208273657860)", "timestamp": 1610478981, "digest": "be8fc5b47c24f60f26e2e5b68a657c7bbf18476bdb41767084941c1be9a870bc", "contributor": "0x841fF85B6873d7bfB712C8f7A347C774355b6EC3"}
{"id": "ZNvq6IuL2YXQH_WB_OoshEaCC3b9egjwPl517gUglnE", "title": "NFT Subculture", "body": "Established art cultures online and in the physical world won't be early adopters of NFTs. A crypto-native subculture will emerge around the medium first.\n\nLet's look at two subcultures that may provide inspiration for how NFTs might evolve:\n\n- Photography as an art form\n- Streetwear as fashion\n\nPhotography was rejected by the art establishment until late in the 20th century, almost a century after it was invented.\n\n> They saw photography merely as a thoughtless mechanism for replication, one that lacked, ‚Äúthat refined feeling and sentiment which animate the productions of a man of genius.‚Äù [source](https://daily.jstor.org/when-photography-was-not-art/)\n\nStreetwear, similarly, was seen as a low form of fashion consumed by a low-brow audience.\n\nSome important properties of disruptive subcultures:\n\n**Practiced by outsiders**\n- Photography: Camera equipment tinkerers\n- Streetwear: Skater kids\n\n**Considered culturally inferior**\n- Photography: Not art, cannot be considered higher than an engraving\n- Streetwear: Just logos on sweatshirts, no appreciation for craft or materials\n\n**New marketplaces and connoisseurship criteria**\n- Photography: Collector community outside of ‚Äúart world‚Äù\n- Streetwear: Bespoke online and retail marketplaces\n\nBoth result in controversy and a rejection of the new form among the old guard. Both are initially adopted by outsiders to the dominant culture.\n\nEventually, the old guard starts to slowly embrace the new medium, because the economic and cultural opportunities are too big. Finally, the new culture is merged wholesale into the old.\n\nNFT culture will evolve following a similar trajectory. NFT art won‚Äôt be taken seriously by the art world at first. Crypto-natives will blaze their unique path and create a new culture.\n\nThe best example of NFT culture today may be community  \"portraits\" of crypto founders. Every civilization valorizes its heroes through art, and crypto is no different.\n\n[](https://twitter.com/Iiterature/status/1349060357889908737)", "timestamp": 1610479148, "digest": "OQrTGdbiDDKs-7it-URF2NYRG9xLMYEQcNnET8fah3I", "contributor": "0x5507dbd48a5A5bAcE8a6030e878cC4E0af147C33"}
{"id": "t8XNGf8pTjDG_b1OUfQzc-yf7p7HOwlVW3YSm5EXeK8", "title": "NFT subculture", "body": "Established art cultures online and in the physical world won't be early adopters of NFTs. A crypto-native subculture will emerge around the medium first.\n\nLet's look at two subcultures that may provide inspiration for how NFTs might evolve:\n\n- Photography as an art form\n- Streetwear as fashion\n\nPhotography was rejected by the art establishment until late in the 20th century, almost a century after it was invented.\n\n> They saw photography merely as a thoughtless mechanism for replication, one that lacked, ‚Äúthat refined feeling and sentiment which animate the productions of a man of genius.‚Äù [source](https://daily.jstor.org/when-photography-was-not-art/)\n\nStreetwear, similarly, was seen as a low form of fashion consumed by a low-brow audience.\n\nSome important properties of disruptive subcultures:\n\n**Practiced by outsiders**\n- Photography: Camera equipment tinkerers\n- Streetwear: Skater kids\n\n**Considered culturally inferior**\n- Photography: Not art, cannot be considered higher than an engraving\n- Streetwear: Just logos on sweatshirts, no appreciation for craft or materials\n\n**New marketplaces and connoisseurship criteria**\n- Photography: Collector community outside of ‚Äúart world‚Äù\n- Streetwear: Bespoke online and retail marketplaces\n\nBoth result in controversy and a rejection of the new form among the old guard. Both are initially adopted by outsiders to the dominant culture.\n\nEventually, the old guard starts to slowly embrace the new medium, because the economic and cultural opportunities are too big. Finally, the new culture is merged wholesale into the old.\n\nNFT culture will evolve following a similar trajectory. NFT art won‚Äôt be taken seriously by the art world at first. Crypto-natives will blaze their unique path and create a new culture.\n\nThe best example of NFT culture today may be community  \"portraits\" of crypto founders. Every civilization valorizes its heroes through art, and crypto is no different.\n\n[](https://twitter.com/Iiterature/status/1349060357889908737)", "timestamp": 1610479294, "digest": "OQrTGdbiDDKs-7it-URF2NYRG9xLMYEQcNnET8fah3I", "contributor": "0x5507dbd48a5A5bAcE8a6030e878cC4E0af147C33"}
{"id": "VceeWRNEeFiQUb7SHMbk1JHLeMYsbJJh8JgcJtEPabA", "title": "NFT Subculture", "body": "Established art cultures online and in the physical world won't be early adopters of NFTs. A crypto-native subculture will emerge around the medium first.\n\nLet's look at two subcultures that may provide inspiration for how NFTs might evolve:\n\n- Photography as an art form\n- Streetwear as fashion\n\nPhotography was rejected by the art establishment until late in the 20th century, almost a century after it was invented.\n\n> They saw photography merely as a thoughtless mechanism for replication, one that lacked, ‚Äúthat refined feeling and sentiment which animate the productions of a man of genius.‚Äù [source](https://daily.jstor.org/when-photography-was-not-art/)\n\nStreetwear, similarly, was seen as a low form of fashion consumed by a low-brow audience.\n\nSome important properties of disruptive subcultures:\n\n**Practiced by outsiders**\n- Photography: Camera equipment tinkerers\n- Streetwear: Skater kids\n\n**Considered culturally inferior**\n- Photography: Not art, cannot be considered higher than an engraving\n- Streetwear: Just logos on sweatshirts, no appreciation for craft or materials\n\n**New marketplaces and connoisseurship criteria**\n- Photography: Collector community outside of ‚Äúart world‚Äù\n- Streetwear: Bespoke online and retail marketplaces\n\nBoth result in controversy and a rejection of the new form among the old guard. Both are initially adopted by outsiders to the dominant culture.\n\nEventually, the old guard starts to slowly embrace the new medium, because the economic and cultural opportunities are too big. Finally, the new culture is merged wholesale into the old.\n\nNFT culture will evolve following a similar trajectory. NFT art won‚Äôt be taken seriously by the art world at first. Crypto-natives will blaze their unique path and create a new culture.\n\nThe best example of NFT culture today may be community  \"portraits\" of crypto founders. Every civilization valorizes its heroes through art, and crypto is no different.\n\n[](https://twitter.com/Iiterature/status/1349060357889908737)", "timestamp": 1610479343, "digest": "OQrTGdbiDDKs-7it-URF2NYRG9xLMYEQcNnET8fah3I", "contributor": "0x5507dbd48a5A5bAcE8a6030e878cC4E0af147C33"}
{"id": "myEiehY_Lg8myT5t5vFgVH0er99xpBZlIN4tiH6BxmE", "title": "NFT subculture", "body": "Established art cultures online and in the physical world won't be early adopters of NFTs. A crypto-native subculture will emerge around the medium first.\n\nLet's look at two subcultures that may provide inspiration for how NFTs might evolve:\n\n- Photography as an art form\n- Streetwear as fashion\n\nPhotography was rejected by the art establishment until late in the 20th century, almost a century after it was invented.\n\n> They saw photography merely as a thoughtless mechanism for replication, one that lacked, ‚Äúthat refined feeling and sentiment which animate the productions of a man of genius.‚Äù [source](https://daily.jstor.org/when-photography-was-not-art/)\n\nStreetwear, similarly, was seen as a low form of fashion consumed by a low-brow audience.\n\nSome important properties of disruptive subcultures:\n\n**Practiced by outsiders**\n- Photography: Camera equipment tinkerers\n- Streetwear: Skater kids\n\n**Considered culturally inferior**\n- Photography: Not art, cannot be considered higher than an engraving\n- Streetwear: Just logos on sweatshirts, no appreciation for craft or materials\n\n**New marketplaces and connoisseurship criteria**\n- Photography: Collector community outside of ‚Äúart world‚Äù\n- Streetwear: Bespoke online and retail marketplaces\n\nBoth result in controversy and a rejection of the new form among the old guard. Both are initially adopted by outsiders to the dominant culture.\n\nEventually, the old guard starts to slowly embrace the new medium, because the economic and cultural opportunities are too big. Finally, the new culture is merged wholesale into the old.\n\nNFT culture will evolve following a similar trajectory. NFT art won‚Äôt be taken seriously by the art world at first. Crypto-natives will blaze their unique path and create a new culture.\n\nThe best example of NFT culture today may be community  \"portraits\" of crypto founders. Every civilization valorizes its heroes through art, and crypto is no different.\n\n[](https://twitter.com/Iiterature/status/1349060357889908737)", "timestamp": 1610479362, "digest": "OQrTGdbiDDKs-7it-URF2NYRG9xLMYEQcNnET8fah3I", "contributor": "0x5507dbd48a5A5bAcE8a6030e878cC4E0af147C33"}
{"id": "iz0B65VEjHDR-vhOkBeQVXW5kREniYP90oMuiuL2eGc", "title": "NFT subculture", "body": "Established art cultures online and in the physical world won't be early adopters of NFTs. A crypto-native subculture will emerge around the medium first.\n\nLet's look at two subcultures that may provide inspiration for how NFTs might evolve:\n\n- Photography as an art form\n- Streetwear as fashion\n\nPhotography was rejected by the art establishment until late in the 20th century, almost a century after it was invented.\n\n> They saw photography merely as a thoughtless mechanism for replication, one that lacked, ‚Äúthat refined feeling and sentiment which animate the productions of a man of genius.‚Äù [source](https://daily.jstor.org/when-photography-was-not-art/)\n\nStreetwear, similarly, was seen as a low form of fashion consumed by a low-brow audience.\n\nSome important properties of disruptive subcultures:\n\n**Practiced by outsiders**\n- Photography: Camera equipment tinkerers\n- Streetwear: Skater kids\n\n**Considered culturally inferior**\n- Photography: Not art, but the output of a \"machine\"\n- Streetwear: Logos on sweatshirts, no appreciation for craft or materials\n\n**New marketplaces and connoisseurship criteria**\n- Photography: Collector community outside of ‚Äúart world‚Äù\n- Streetwear: Bespoke online and retail marketplaces\n\nBoth result in controversy and a rejection of the new form among the old guard. Both are initially adopted by outsiders to the dominant culture.\n\nEventually, the old guard starts to slowly embrace the new medium, because the economic and cultural opportunities are too big. Finally, the new culture is merged wholesale into the old.\n\nNFT culture will evolve following a similar trajectory. NFT art won‚Äôt be taken seriously by the art world at first. Crypto-natives will blaze their unique path and create a new culture.\n\nThe best example of NFT culture today may be community  \"portraits\" of crypto founders. Every civilization valorizes its heroes through art, and crypto is no different.\n\n[](https://twitter.com/Iiterature/status/1349060357889908737)", "timestamp": 1610485965, "digest": "OQrTGdbiDDKs-7it-URF2NYRG9xLMYEQcNnET8fah3I", "contributor": "0x5507dbd48a5A5bAcE8a6030e878cC4E0af147C33"}
{"id": "BUh7-yEKGjZBbDqnAucDtYakQvlwCM8neEPDy8XxaFs", "title": "NFT subculture", "body": "Established art cultures online and in the physical world won't be early adopters of NFTs. A crypto-native subculture will emerge around the medium first.\n\nLet's look at two subcultures that may provide inspiration for how NFTs might evolve:\n\n- Photography as an art form\n- Streetwear as fashion\n\nPhotography was rejected by the art establishment until late in the 20th century, almost a century after it was invented.\n\n> They saw photography merely as a thoughtless mechanism for replication, one that lacked, ‚Äúthat refined feeling and sentiment which animate the productions of a man of genius.‚Äù [source](https://daily.jstor.org/when-photography-was-not-art/)\n\nStreetwear, similarly, was seen as a low form of fashion consumed by a low-brow audience.\n\nSome important properties of disruptive subcultures:\n\n**Practiced by outsiders**\n- Photography: Camera equipment tinkerers\n- Streetwear: Skater kids\n\n**Considered culturally inferior**\n- Photography: Not art, but the output of a \"machine\"\n- Streetwear: Logos on sweatshirts, no appreciation for craft or materials of fashion\n\n**New marketplaces and connoisseurship criteria**\n- Photography: Collector community outside of ‚Äúart world‚Äù\n- Streetwear: Bespoke online and retail marketplaces\n\nBoth result in controversy and a rejection of the new form among the old guard. Both are initially adopted by outsiders to the dominant culture.\n\nEventually, the old guard starts to slowly embrace the new medium, because the economic and cultural opportunities are too big to miss out on. Finally, the new culture is merged wholesale into the old.\n\nNFT culture will evolve following a similar trajectory. NFT art won‚Äôt be taken seriously by the art world at first. Crypto-natives will blaze their unique path and create a new culture.\n\nThe best example of NFT culture today may be community  \"portraits\" of crypto founders. Every civilization valorizes its heroes through art, and crypto is no different.\n\n[](https://twitter.com/Iiterature/status/1349060357889908737)", "timestamp": 1610486114, "digest": "OQrTGdbiDDKs-7it-URF2NYRG9xLMYEQcNnET8fah3I", "contributor": "0x5507dbd48a5A5bAcE8a6030e878cC4E0af147C33"}
{"id": "swxzvCOBW49V7oAprwSRuh9tUYW0oaLRMbDppdxMboQ", "title": "Formatting Guide", "body": "This is the Mirror Formatting Guide!", "timestamp": 1610501283, "digest": "fMzen4XH0ez6PIu2H7c_ynrLyTajh41rPVIkSVaqDsE", "contributor": "0x841fF85B6873d7bfB712C8f7A347C774355b6EC3"}
{"id": "pzKj7Mw-JLmsoXI5lXrkShX7_6QXkUP89HBlWHfC_CM", "title": "NFT test", "body": "[](ethereum://0xb932a70a57673d89f4acffbe830e8ed7f75fb9e0/18153)", "timestamp": 1610506938, "digest": "5YyUHWFQK6Rr4oG1TJfWldt9mFH8lvHptzGzohFdtmw", "contributor": "0x5507dbd48a5A5bAcE8a6030e878cC4E0af147C33"}
{"id": "fy_dr9faJlMYW_vQA0iAC0--SMSaMuoDlbkb_NawlZE", "title": "IT'S TIME TO $WRITE", "body": "Well...*almost*. Today I implemented the code and wrote tests for the basic functionality that we've agreed on for the v1 of Mirror's on-chain components. Tomorrow I'll deploy that to testnet and wire up the frontend.\n\nSo you've got your *Mirror Invite Token*, this allows you to create a *Mirror Publication*, which has a *Mirror ENS subdomain*. The Mirror Publication allows you to have a token (it's has `mint()`), which is cool, because every Mirror Publication is a legit publisher this way. It can also do fun things like say \"if the reader has 5 of my tokens, allow them to comment\", or \"only readers with at least 1 token can read this exclusive entry\".\n\nIn terms of launching, today I realized that we should add commenting functionality, and allow anyone to \"sign up\" and get a contributor account for commenting, without needing an invite token or to deploy a publication. This would allow us to see who shows up and contributes good comments, which I think would encourage us to mint $WRITE tokens for those folks -- having shown they are interested and responsibly contributing to the community.\n\nI'm not sure this follows for \"liking\". Liking is definitely not as cool as commenting, and I think liking might actually have been bad for the internet in general, because it perpetuates status anxiety. I think vanity metrics are overrated. This has been on my mind more after getting into Jaron Lanier's stuff this week (have listened to a few hours of content from YouTube so far, starting with the Radical Exchange interview).\n\nThe other idea that I've been playing with is on-chain referrals. If a publication had a `refer()` function, it could allow a publication owner to mint a token for another Ethereum address. We could cap the number of tokens that a publication could mint, which would allow an organic expansion of the platform. It would be somewhat expensive to refer someone (at least a few dollars), but it could be worth it.\n\nTaking about costs, with the current implementation it will cost about $120 to register for Mirror. This is quite expensive. Here's my calculation:\n\n![Current estimate around $120](https://images.mirror-media.xyz/publication-images/254e583b-dc13-4518-a355-3a768c111af7.jpeg)\n\nI'll need to break this down to see what's taking the most gas and how to optimize it. I'll be able to optimize deployment through a proxy-implementation deployment strategy, which also allows for contract upgradability. But I think that can be dealt with at a later stage...\n\nRight now the goal is just to learn as much as we can and get a good feeling of how this will all work together. This isn't DeFi, so it's not as much a matter of *calculating* the right interface with interest rates and farming -- it's more about getting a sense of what it's like to use this new web3 paradigm for publishing.\n\nIf this works out well -- if the UI feels good -- this project is going to accelerate web3 quite a lot. I don't know if people are expecting that for 2021; a lot of people are still focused on DeFi. But what they're missing is that a web publisher with an on-chain component could scale extremely rapidly.", "timestamp": 1610516747, "digest": "vCYXUceRrIjiZg-IDvtBWqPoSdhtAegjvceuzbsjhuY", "contributor": "0xCC65fA278B917042822538c44ba10AD646824026"}
{"id": "AJfztBx2gY_aO0FhkfVBLNFmJmI00YSw78qOxwBArE8", "title": "Considering a \"Publication\" Contract", "body": "There isn't much prior art on blogging products for Ethereum. Most Ethereum products are narrowly financial; DAOs, for example, have been typically intended to be venture funds, or funding campaigns ‚Äî not publishing entities.\n\nWhen I consider what a *publication* might look like in the world of Ethereum, I imagine a deployed contract such as *MirrorPublication* that holds state such as *contributors* and *admins.* But this costs a lot of gas and would make onboarding Mirror expensive. What should onboarding cost? Well, it depends on the publication...\n\nIf the publication is for a single contributor ‚Äî like a personal blog ‚Äî then maybe it doesn't need a publication contract. The writer could lose out on a some other interesting features that also come with a publication contract, but it should be okay for a lightweight hobby account.\n\nA fully deployed publication could be something that someone upgrades into. I ran through the logic for this and it seems feasible (I'll spare you the details). When a user upgrades to a deploy Publication, it's more of a company structure with a number of different writers, a treasury, etc. And this could be *very* cool, and also not something we do this week.\n\nRealizing this means that we don't need to polish and audit a large repo contracts in order to launch our first version of Mirror on mainnet. Version 1 can be for individual publishers (\"multi-contributor blogs coming soon!\").\n\nI see the way forward towards a more sophisticated protocol with multi-contributor publications. In the meantime, we can deploy the simple version to mainnet and focus on making that experience great. This will make Jon-Kyle happy, who has argued in favor of focusing on building a good writing experience for our first users.\n\n![Playing with some Solidity code to make the Publication contract idea more tangible](https://images.mirror-media.xyz/publication-images/3dfeafd3-23ac-4aac-a118-47713315df55.jpeg)\n\n## Blast from the Past\nI was doing some research on frontend editors, and stumbled upon a blogging platform that I had [made seven years ago](https://github.com/graemeboy/ninja/tree/master/app). It's in PHP, so I bet it still works perfectly on any Linux system. It didn't need a database (it used a \"flat file\" system), so it let you set up a blog in under a minute with no dependencies.\n\n![A Special-Purpose CMS I made 7 years ago](https://images.mirror-media.xyz/publication-images/59c1156c-ceb3-427a-9221-f2d33becb42b.jpeg)\n\n![](https://images.mirror-media.xyz/publication-images/3a219779-9731-4526-9700-ad298c1d0de4.jpeg)\n\n![](https://images.mirror-media.xyz/publication-images/bf527d01-2193-4f20-9226-b3efdead0ff5.jpeg)\n\nObviously heavily inspired by Wordpress. How crazy is that? Mirror is my *fourth* CMS platform that I've worked on ‚Äî the first one ever with a team though!\n\n## Signal vs Keybase?\nWe spent a while discussing present vs future features, and where our focus should be. This included Denis talking about Signal vs Keybase (Elon Musk tweeted about Signal today, taking down their service due to sudden popularity). \n\n![image](https://images.mirror-media.xyz/publication-images/a83d3a3d-1acd-4f5b-bc8b-e7063a673b7b.jpeg)\n\nIt seemed like the consensus was that Keybase didn't focus on one thing, which made it difficult to use and mediocre relative to Signal, which did one thing really well. Denis' point was that the thing Signal focused on was the *protocol*, which turned out to be more important than any other features. It's a messy example and doesn't help us, I think.\n\n", "timestamp": 1610516859, "digest": "r_nl_GSnm4ur5sW9Z3A9Ee2668qeQSAvYLTx-n_k9rY", "contributor": "0xCC65fA278B917042822538c44ba10AD646824026"}
